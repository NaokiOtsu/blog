(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{255:function(n,e,t){var content=t(447);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(22).default)("85dd2496",content,!0,{sourceMap:!1})},399:function(n,e,t){"use strict";var l=t(10),c=t(400)(5),r=!0;"find"in[]&&Array(1).find(function(){r=!1}),l(l.P+l.F*r,"Array",{find:function(n){return c(this,n,arguments.length>1?arguments[1]:void 0)}}),t(86)("find")},400:function(n,e,t){var l=t(38),c=t(85),r=t(47),o=t(25),h=t(401);n.exports=function(n,e){var t=1==n,d=2==n,j=3==n,m=4==n,f=6==n,w=5==n||f,y=e||h;return function(e,h,v){for(var k,x,_=r(e),S=c(_),A=l(h,v,3),E=o(S.length),P=0,C=t?y(e,E):d?y(e,0):void 0;E>P;P++)if((w||P in S)&&(x=A(k=S[P],P,_),n))if(t)C[P]=x;else if(x)switch(n){case 3:return!0;case 5:return k;case 6:return P;case 2:C.push(k)}else if(m)return!1;return f?-1:j||m?m:C}}},401:function(n,e,t){var l=t(402);n.exports=function(n,e){return new(l(n))(e)}},402:function(n,e,t){var l=t(13),c=t(123),r=t(2)("species");n.exports=function(n){var e;return c(n)&&("function"!=typeof(e=n.constructor)||e!==Array&&!c(e.prototype)||(e=void 0),l(e)&&null===(e=e[r])&&(e=void 0)),void 0===e?Array:e}},403:function(n,e,t){var map={"./2016-09-03-button-click-animation.md":404,"./2016-09-18-border-image-retina.md":405,"./2016-09-18-live-reload-browser-sync.md":406,"./2016-09-18-no-change-button-design-click-scale.md":407,"./2016-09-18-svg-circle-animation.md":408,"./2016-09-22-javascript-addeventlistener-param-removeeventlistener.md":409,"./2016-09-22-javascript-array-shuffle.md":410,"./2016-09-22-javascript-pare-array-create.md":411,"./2016-09-24-javascript-replace-child-clone-node.md":412,"./2016-10-25-vagrant-php-mysql-virtualbox.md":413,"./2016-10-29-cakephp3-browser-sync-live-reload.md":414,"./2016-11-01-softbank-son-president.md":415,"./2016-11-11-font-awesome-error.md":416,"./2016-11-13-youtube-play-list-youtube-data-api-v3.md":417,"./2016-11-28-local-php-browser-sync.md":418,"./2016-12-04-git-submodule-replace-plain-content.md":419,"./2016-12-05-css-animation-bug.md":420,"./2016-12-20-git-checkout-ours-theirs.md":421,"./2017-02-10-getcomputedstyle-parseint-css-js.md":422,"./2017-03-13-webpack-autoprefixer-setting.md":423,"./2017-03-15-android-webview-scroll-heavy.md":424,"./2017-04-30-flexbox-inline-element.md":425,"./2017-05-06-director.md":426,"./2017-05-15-react-webpack-bioplate.md":427,"./2017-05-16-d3-webpack-multi-values.md":428,"./2018-04-14-vscodevim-keybindings.md":429,"./2018-08-25-mac-keyboard-shortcuts-when-vscode.md":430,"./2018-10-05-gpu-cpu-css-animation.md":431,"./2018-10-07-english-google-search.md":432,"./2018-10-07-javascript-array-in-object.md":433,"./2018-10-16-highlight-js-pre-code-word-wrap.md":434,"./2018-10-19-js-loop-between-month-ranges.md":435,"./2018-10-28-commands-rbenv-and-nvm.md":436,"./2018-11-02-graphql-rails-first-query.md":437,"./2018-11-04-react-native-error.md":438,"./2018-11-12-react-native-typescript.md":439,"./2018-11-23-react-native-change-app-icon.md":440,"./2018-11-30-lambda-puppeteer-dynamic-rendering.md":441,"./2018-12-09-react-native-firestore.md":442,"./2019-02-24-local-http-server.md":443,"./2019-05-19-react-native-firebase-touchlife.md":444,"./2019-05-23-suetsugu-magic.md":445};function l(n){var e=c(n);return t(e)}function c(n){if(!t.o(map,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return map[n]}l.keys=function(){return Object.keys(map)},l.resolve=c,n.exports=l,l.id=403},404:function(n,e,t){"use strict";t.r(e),e.default='<section><p>あるボタンを押した時に、<br>\nぽよんと反応するようなアニメーション効果を与えたい時があります。<br>\nその要素を押したら、例えば <code>.click-animation</code>のような、ぽよんとするCSSアニメーションを付けたクラスを、付与させる事が多いのですが、そんな時の実装MEMOを残しておこうと思います。</p>\n<h2>従来の方法</h2>\n<p>要素を押した時に、<code>.click-animation</code>が既に付与されていたら、<br>\n削除してから付与しないとアニメーションしなく、<br>\nまた削除して即付与してもアニメーションしないので、<br>\n<code>setTimeout()</code>などで適当な一定時間待って付与する事が多かったです。</p>\n<pre><code class="hljs language-js">$(target).removeClass(<span class="hljs-string">\'click-animation\'</span>);\nsetTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    $(target).addClass(<span class="hljs-string">\'click-animation\'</span>);\n}, <span class="hljs-number">10</span>);\n</code></pre>\n<p>もしくは、<code>webkitAnimationEnd</code>などを使って、アニメーション後にクラス削除などしていました。</p>\n<pre><code class="hljs language-js">$(target).addClass(<span class="hljs-string">\'click-animation\'</span>);\n$(target).on(<span class="hljs-string">\'webkitAnimationEnd\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    $(target).removeClass(<span class="hljs-string">\'click-animation\'</span>);\n});\n</code></pre>\n<p>ただこれだと連打した場合に反応してくれない場合があります。</p>\n<h2>実装方法</h2>\n<p><code>requestAnimationFrame</code>を使うと良さそうです。</p>\n<pre><code class="hljs language-js">$(target).removeClass(<span class="hljs-string">\'click-animation\'</span>);\nrequestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    $(target).addClass(<span class="hljs-string">\'click-animation\'</span>);\n});\n</code></pre>\n<p>これだと高橋名人ばりに連打した場合も確実にアニメーション効果を与える事ができました。<br>\nブラウザの次のレンダリングフレームを待ってクラス付与してるから確実ということでしょうか。</p>\n<p>Google I/O 2016の<a href="https://github.com/GoogleChrome/ui-element-samples/blob/gh-pages/swipeable-cards/cards.js#L166-L175">実装サンプル</a>でも、<code>requestAnimationFrame</code>を使った要素の付与や削除をやってるようでした。</p>\n</section>\n'},405:function(n,e,t){"use strict";t.r(e),e.default='<section><p>border-imageを使う時は、<br>\n<a href="http://border-image.com/">http://border-image.com/</a><br>\nを使ってCSSソースを生成して貼り付ける事が多いのですが、<br>\nこちらで生成されるCSSはRetina対応してない素の画像サイズなので、<br>\nスマホ制作してる時とかは画像が大きくなってしまいます。</p>\n<h2>Retina対応させる方法</h2>\n<p>Retina対応する場合は、<code>border-image</code>の数値は変えずに、<br>\n<code>border-width</code>の値だけ、1/2とかにすると良いので、<br>\n例えば、こうなっていたら↓</p>\n<pre><code class="hljs language-css"><span class="hljs-selector-tag">border-width</span>: 36<span class="hljs-selector-tag">px</span> 40<span class="hljs-selector-tag">px</span> 40<span class="hljs-selector-tag">px</span> 44<span class="hljs-selector-tag">px</span>;\n</code></pre>\n<p>こうすると良かったです↓</p>\n<pre><code class="hljs language-css"><span class="hljs-selector-tag">border-width</span>: 18<span class="hljs-selector-tag">px</span> 20<span class="hljs-selector-tag">px</span> 20<span class="hljs-selector-tag">px</span> 22<span class="hljs-selector-tag">px</span>;\n</code></pre>\n</section>\n'},406:function(n,e,t){"use strict";t.r(e),e.default='<section><p>さっとローカルサーバーを立ち上げて、BrowserSyncさせたい時のメモ。</p>\n<h2>セットアップ</h2>\n<p>まずは作業場所で、セットアップ。</p>\n<pre><code class="hljs language-shell"><span class="hljs-meta">$</span><span class="bash"> yarn init -y</span>\n<span class="hljs-meta">$</span><span class="bash"> yarn add -D browser-sync</span>\n</code></pre>\n<p>package.jsonにシェルを記載する。</p>\n<pre><code class="hljs language-json"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-attr">"start"</span>: <span class="hljs-string">"browser-sync start --server --files \'**/*\'"</span>\n},\n</code></pre>\n<h2>yarn start でスタート</h2>\n<p><code>yarn start</code>でブラウザが開いてローカルサーバーが立ち上がり、<br>\nファイルを監視して、BrowserSyncが開始される。</p>\n<p>Sync時に右上に表示されるお知らせは無くしたい時は、<code>--no-notify</code>を付けると良い。<br>\n他にオプションを付けたい時は下記を参照すると良いです。<br>\n<a href="https://www.browsersync.io/docs/command-line#start">https://www.browsersync.io/docs/command-line#start</a></p>\n</section>\n'},407:function(n,e,t){"use strict";t.r(e),e.default='<section><p>「<a href="https://www.amazon.co.jp/CSS%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88-%E2%80%9547%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%81%A7CSS%E3%82%92%E8%87%AA%E5%9C%A8%E3%81%AB%E6%93%8D%E3%82%8B-Lea-Verou/dp/4873117666/ref=sr_1_1?ie=UTF8&amp;qid=1474188594&amp;sr=8-1&amp;keywords=CSS%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88">CSSシークレット</a>」で書かれていた備忘録で、言葉では伝えるのが難しいですが、<br>\n開発していると、ボタンそのもののwidthとheightでは領域が狭くて、ユーザーさんはクリックしにくい、<br>\nただそのボタンのデザインは変更せずに、クリックできる領域だけを広げたいという時があります。そんな時の実装方法です。</p>\n<h2>実装方法</h2>\n<p>擬似要素を使って下記のように実装します。</p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.target</span> {\n    <span class="hljs-attribute">position</span>: relative;\n}\n<span class="hljs-selector-class">.target</span><span class="hljs-selector-pseudo">:before</span> {\n    <span class="hljs-attribute">content</span>: <span class="hljs-string">\'\'</span>;\n    <span class="hljs-attribute">position</span>: absolute;\n    <span class="hljs-attribute">top</span>: -<span class="hljs-number">15px</span>; <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">15px</span>; <span class="hljs-attribute">right</span>: -<span class="hljs-number">15px</span>; <span class="hljs-attribute">left</span>: -<span class="hljs-number">15px</span>;\n}\n</code></pre>\n<p>上記の場合、ボタンの周りに15pxクリック領域が出来ます。</p>\n<h2>他のやり方も</h2>\n<p>擬似要素を既に使っている時は、ボーダーを使ったやり方もあります。</p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.target</span> {\n    <span class="hljs-attribute">border</span>: <span class="hljs-number">15px</span> solid transparent;\n}\n</code></pre>\n<p>この場合、ボタン領域に15pxの透明なボーダーが出来て領域が広がります。</p>\n<p>もしこれでボタンの背景が広がってしまう場合は、background-clip: padding-box;を指定することで回避することもできます。</p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.target</span> {\n    <span class="hljs-attribute">border</span>: <span class="hljs-number">15px</span> solid transparent;\n    <span class="hljs-attribute">background-clip</span>: padding-box;\n}\n</code></pre>\n</section>\n'},408:function(n,e,t){"use strict";t.r(e),e.default='<section><p>ローディングバーや円グラフを表示したい時など、<br>\nくるっと回る円のアニメーションを作りたい時があります。</p>\n<img src="https://qiita-image-store.s3.amazonaws.com/0/2582/b6d35e8d-0301-57c4-e4c3-2b12ed7fafd9.png" alt="Create_a_New_Pen.png" />\n<p><a href="http://codepen.io/melo15/pen/yJmVEJ">http://codepen.io/melo15/pen/yJmVEJ</a></p>\n<h2>実装方法</h2>\n<p>下記のように実装すると良いです。</p>\n<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"124"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"124"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">"62"</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">"62"</span> <span class="hljs-attr">r</span>=<span class="hljs-string">"60"</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span>\n</code></pre>\n<pre><code class="hljs language-css"><span class="hljs-selector-tag">svg</span> {\n    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-90deg);\n}\n\n<span class="hljs-selector-tag">circle</span> {\n    <span class="hljs-attribute">fill</span>: transparent;\n    <span class="hljs-attribute">stroke</span>: <span class="hljs-number">#4fa8df</span>;\n    <span class="hljs-attribute">stroke-width</span>: <span class="hljs-number">4</span>;\n    <span class="hljs-attribute">animation</span>: circle <span class="hljs-number">1s</span> infinite;\n}\n\n@<span class="hljs-keyword">keyframes</span> circle {\n  0% { <span class="hljs-attribute">stroke-dasharray</span>: <span class="hljs-number">0</span> <span class="hljs-number">377</span>; }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">stroke-dasharray</span>: <span class="hljs-number">377</span> <span class="hljs-number">377</span>; }\n}\n</code></pre>\n<h2>対応ブラウザ</h2>\n<p>インラインSVGなので、モダンブラウザは対応していて、<br>\nIE8以下、Android2系以下辺りは使えなさそうです。<br>\n<a href="http://caniuse.com/#feat=svg-html5">http://caniuse.com/#feat=svg-html5</a></p>\n<h2>実装方法</h2>\n<p>半径60pxの円を作りたいとすると、<br>\n<code>&lt;svg&gt;</code>の<code>width</code>と<code>height</code>には、<code>60px x 2 = 120px</code><br>\nこれに、のちのち設定する円の外側の線幅(stroke-width)の4pxを足して、124pxを設定します。<br>\n<code>&lt;circle&gt;</code>の<code>cx</code>と<code>cy</code>には、124pxの半分の値を設定し、円を<code>&lt;svg&gt;</code>の中央に配置します。<br>\n<code>r</code>は円の半径で60pxを設定しますが、この値によって後々アニメーションさせる時の値が変わってきます。</p>\n<h3>CSSでは</h3>\n<p><code>&lt;circle&gt;</code>の<code>fill</code>を<code>transparent</code>にして塗りつぶしなしに設定します。<br>\n<code>stroke</code>と<code>stroke-width</code>を指定して、円の外側に線を表示します。<br>\nこれを<code>animation</code>を使って、くるっと回るアニメーションにします。</p>\n<h3>アニメーションでは</h3>\n<p>破線を設定する<code>stroke-dasharray</code>を使います。<br>\n<code>stroke-dasharray: 破線の長さ 破線の間隔;</code><br>\nこの破線の長さをアニメーションさせる事で、くるっと回るアニメーションとなります。</p>\n<h3>破線の間隔の値</h3>\n<p>この時、破線の間隔の値は、円周の長さを設定する必要があり、計算によって導きます。<br>\n円周の長さは<code>直径 x 3.14</code>で計算します。<br>\n今回は、<code>120 x 3.14 = 376.8</code>なので、小数点を切り上げて<code>377</code>としました。<br>\nあとは、破線の長さを0から377までアニメーションさせると、くるっと1周するアニメーションとなります。</p>\n<pre><code class="hljs language-css">@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> circle {\n  0% { <span class="hljs-attribute">stroke-dasharray</span>: <span class="hljs-number">0</span> <span class="hljs-number">377</span>; }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">stroke-dasharray</span>: <span class="hljs-number">377</span> <span class="hljs-number">377</span>; }\n}\n</code></pre>\n<h3>1周ではなく半分のところで止めたい場合は</h3>\n<p>半分のところで止めたい場合は、<code>377 / 2 = 188.5</code>などを設定すると良いです。</p>\n<p>最後に、そのままだとアニメーションの開始点が90度ずれてしまうので、<br>\n<code>&lt;svg&gt;</code>に<code>transform: rotate(-90deg);</code>を設定して、上からくるっと回るアニメーションにします。</p>\n<p>同じようなアニメーションのデモも、CodePenにあったのでメモしておきます。</p>\n<p><a href="https://codepen.io/kyledws/pen/Gvelt/">https://codepen.io/kyledws/pen/Gvelt/</a></p>\n</section>\n'},409:function(n,e,t){"use strict";t.r(e),e.default='<section><p>全然スマートじゃないので、もっと良い方法ありそうですが、、一応備忘録で残しておきます。</p>\n<pre><code class="hljs language-js">element.addEventListener(<span class="hljs-string">\'click\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onClick</span>(<span class="hljs-params"></span>) </span>{\n    onClickHandler(onClick, <span class="hljs-string">\'渡したい引数\'</span>);\n});\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onClickHandler</span>(<span class="hljs-params">func, text</span>) </span>{\n    <span class="hljs-built_in">console</span>.log(text); <span class="hljs-comment">// 渡したい引数</span>\n    element.removeEventListener(<span class="hljs-string">\'click\'</span>, func);\n}\n</code></pre>\n</section>\n'},410:function(n,e,t){"use strict";t.r(e),e.default='<section><p>ピュア(Vanilla)なJavaScriptでの配列のシャッフル。</p>\n<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> targets = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];\n<span class="hljs-keyword">var</span> results = [];\n<span class="hljs-keyword">while</span> (targets.length) {\n    results.push(targets.splice(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * targets.length), <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]);\n}\n<span class="hljs-built_in">console</span>.log(results); <span class="hljs-comment">// 例: [5, 1, 4, 3, 2]</span>\n</code></pre>\n<h2>ただちょっと注意も</h2>\n<p>※ただこのやり方だと全く同じ配列が返されてしまう場合もあります。<br>\n間違いなくシャッフルさせなければいけない時の記述はもう少し複雑になりますが、下記を参照すると良いです。</p>\n<p><a href="https://h2ham.net/javascript-%E3%81%A7%E9%85%8D%E5%88%97%E3%81%AE%E3%82%B7%E3%83%A3%E3%83%83%E3%83%95%E3%83%AB">JavaScriptで配列のシャッフル</a></p>\n</section>\n'},411:function(n,e,t){"use strict";t.r(e),e.default='<section><p>神経衰弱を作る時のような、[1, 1, 2, 2]のようなペアな値を持った配列が欲しい時の実装MEMOです。</p>\n<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> cards = [];\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &amp;lt;= <span class="hljs-number">2</span>; i++) {\n    cards[cards.length] = i;\n    cards[cards.length] = i;\n}\n<span class="hljs-built_in">console</span>.log(cards); <span class="hljs-comment">// [1, 1, 2, 2]</span>\n</code></pre>\n</section>\n'},412:function(n,e,t){"use strict";t.r(e),e.default='<section><p>ピュア(Vanilla)なJavaScriptでの要素の入れ替えのMEMOです。<br>\n例えばAとBの要素を入れ替えたい時などに使います。</p>\n<h2>実装方法</h2>\n<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> clone_A = element_A.cloneNode(<span class="hljs-literal">true</span>);\n<span class="hljs-keyword">var</span> clone_B = element_B.cloneNode(<span class="hljs-literal">true</span>);\n\nelement_A.parentNode.replaceChild(clone_A, element_B);\nelement_B.parentNode.replaceChild(clone_B, element_A);\n</code></pre>\n<p>cloneNodeで要素のクローンを作った後に、replaceChildで置換します。<br>\ncloneNodeの引数は、nodeの子孫ノードも複製する場合はtrue<br>\nnodeのみを複製する場合はfalseとなります。</p>\n</section>\n'},413:function(n,e,t){"use strict";t.r(e),e.default='<section><p>Vagrantで開発環境構築(PHP+Mysql)した時のメモです。</p>\n<h2>参考にした記事</h2>\n<p>こちらの記事を参考に構築しました。<br>\n<a href="http://fnya.cocolog-nifty.com/blog/2015/12/vagrant-centos7.html">http://fnya.cocolog-nifty.com/blog/2015/12/vagrant-centos7.html</a></p>\n<p>シンボリックリンクを貼って、ローカルPCからファイル編集出来るようにするのに、下記を参照しました。<br>\n<a href="http://qiita.com/tiwu_official/items/f135e6b6fbbe3ec6aa54#8%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AA%E3%83%83%E3%82%AF%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E4%BD%9C%E6%88%90">http://qiita.com/tiwu_official/items/f135e6b6fbbe3ec6aa54#8%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AA%E3%83%83%E3%82%AF%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E4%BD%9C%E6%88%90</a></p>\n<p>ただファイル共有が使えないエラーが出てた。ので下記を参考に解決しました。<br>\n<a href="http://stackoverflow.com/questions/22717428/vagrant-error-failed-to-mount-folders-in-linux-guest">http://stackoverflow.com/questions/22717428/vagrant-error-failed-to-mount-folders-in-linux-guest</a></p>\n</section>\n'},414:function(n,e,t){"use strict";t.r(e),e.default='<section><p>CakePHP3でWebアプリの開発をしていましたが、<br>\nBrowserSyncを使ってLiveReloadさせて効率よく開発していきたい事があります。そんな時のMEMOを残しておきます。</p>\n<h2>実装方法</h2>\n<p>CakePHPでは</p>\n<pre><code class="hljs language-shell">bin/cake server\n</code></pre>\n<p>で、デフォルトは、 <code>localhost:8765</code> のサーバーが立ち上がりますが、</p>\n<p>まずはこれを、</p>\n<pre><code class="hljs language-shell">bin/cake server -H {IPアドレス} -p 8765\n</code></pre>\n<p>で起動させて、 {IPアドレス}:8765 で立ち上がるようにします。</p>\n<p>そしてBrowserSync側では、optionsのproxyとportを設定すれば良さそうです。</p>\n<pre><code class="hljs language-js">{\n    <span class="hljs-attr">proxy</span>: <span class="hljs-string">"{IPアドレス}:8765"</span>,\n    <span class="hljs-attr">port</span>: <span class="hljs-number">4000</span>\n}\n</code></pre>\n<p>これでBrowserSyncをstartさせたら、<br>\nhttp://{IPアドレス}:4000/ もしくは <a href="http://localhost:4000">http://localhost:4000</a> へのアクセスで問題なくLiveReload出来ました。</p>\n</section>\n'},415:function(n,e,t){"use strict";t.r(e),e.default='<section><iframe width="560" height="315" src="https://www.youtube.com/embed/zhrz8KdUB4w" frameborder="0" allowfullscreen></iframe>\n<p>孫社長はずっと前から尊敬している事業家のお一人で、<br>\n2005年、東京ビックサイトで行われたソフトバンクBBの新卒入社式で、豆粒ぐらいとても遠くでお話されていたのにすごく感動したのを思い出す。</p>\n<p>本や雑誌でも様々なことを学ばせて頂いていますが、<br>\nこの動画でおっしゃってる事や考えが原点にあるような気がしていて、これまでにも何度も見てきた。</p>\n<p>お金とか地位とか名誉とかそんなことじゃなく、自分がやりたいと思った事を貫くかっこよさ。<br>\n自分が死ぬ前に、あ〜無難に生きたな、出世できたなとかそんな小さな事じゃなく、<br>\n心からやりたい事を本気でやったなと思って死にたい。<br>\nそんな想いをこの動画から感じる。</p>\n<p>そんな孫社長が何かの折に「流行りのおっかけ屋さん」という表現をおっしゃっていたのを聞いて、そのフレーズに自分の中ではドキっとした。<br>\nそれは自分の今の職業(フロントエンドエンジニア)やITという業界そのものが、流行りのおっかけ要素が満載だからかなと思う。<br>\n決して今の職業や業界が嫌いとかじゃなく大好きだけど、技術はあくまで手段で、<br>\n「使っている方に何を提供したのか」ってところがほんとに大事で、その部分の意識の持ち方によって日々の過ごし方もガラっと変わってきそうだ。</p>\n<p>高い技術はもちろん大切。<br>\nただ高い技術を持つより大切なのは、もっと愚直に使ってくれている方に目を向けた思いやりの気持ちで、場合によっては技術自体は超古いんだけど、使う人にとっては最高の体験を提供している事が工数1時間で実装出来た、なんて事が全然起こり得ると思っている。<br>\nだからこそ、そこに対して日々向き合っていかないと「ただの流行りのおっかけ屋さん」になってしまう、ということを思ったりした。</p>\n</section>\n'},416:function(n,e,t){"use strict";t.r(e),e.default='<section><p><a href="http://fontawesome.io/" target="_blank">Font Awesome</a>を使っていて、本番サイトで確認しようとしたら、<br>\nフォントが正しく出ていない... ローカルでは大丈夫だったのに..</p>\n<p>そして、コンソールを見たら、<br>\n<strong>「Failed to decode downloaded font」</strong><br>\nとか<br>\n<strong>「OTS parsing error: incorrect file size in WOFF header」</strong><br>\nとか出ている様子..。</p>\n<h2>原因</h2>\n<p>調べてみると、gitの改行コードを変換する仕組みによって起きてるようでした。<br>\n参考: <a href="http://ts0818.hatenablog.com/entry/2016/04/01/225341" target="_blank">『Failed to decode downloaded font』から始まるエラー</a></p>\n<h2>対策</h2>\n<p>gitのルートディレクトリにある、「.gitattributes」ファイルを開いて、<br>\n変換しないように下記を追加してあげると問題ありませんでした。</p>\n<pre><code class="hljs"># Denote <span class="hljs-keyword">all</span> <span class="hljs-keyword">files</span> that are truly <span class="hljs-keyword">binary</span> <span class="hljs-keyword">and</span> should <span class="hljs-keyword">not</span> be modified.\n... 中略\n<span class="hljs-comment">*.otf binary</span>\n<span class="hljs-comment">*.eot binary</span>\n<span class="hljs-comment">*.svg binary</span>\n<span class="hljs-comment">*.ttf binary</span>\n<span class="hljs-comment">*.woff binary</span>\n<span class="hljs-comment">*.woff2 binary</span>\n</code></pre>\n<p>もう一度、正しいフォントを格納して、git pushして確認したところ無事解決でした。</p>\n</section>\n'},417:function(n,e,t){"use strict";t.r(e),e.default='<section><p>自分のプライベートなプロダクトで、<br>\nYoutubeの再生リストの動画を一覧表示する機能が入れる必要がありまして、<br>\n<a href="https://developers.google.com/youtube/v3/getting-started?hl=ja" target="_blank">Youtube Data API v3 のガイド</a>を見ながらやっていましたが、<br>\nスムーズに行かなかったので結論の実装方法をメモしておくことにしました。</p>\n<h2><strong>実装方法</strong></h2>\n<p>下記の4ステップを踏むと良かったです。</p>\n<h3><strong>1. APIキーを取得する</strong></h3>\n<p><a href="https://developers.google.com/youtube/registering_an_application?hl=ja" target="_blank">こちら</a>の手順を踏んで、APIキーを取得します。</p>\n<h3><strong>2. 表示したい動画のリクエストURLを<a href="https://developers.google.com/youtube/v3/docs/?hl=ja" target="_blank">リファレンス</a>から調べます</strong></h3>\n<p>自分の場合は、再生リストの一覧が欲しかったので、<a href="https://developers.google.com/youtube/v3/docs/playlistItems/list?hl=ja" target="_blank">こちら</a>のリクエストURLが必要でした。</p>\n<pre><code class="hljs language-php">GET https:<span class="hljs-comment">//www.googleapis.com/youtube/v3/playlistItems</span>\n</code></pre>\n<p>GET形式で、このURLにリクエストをすれば良いようです。</p>\n<h3><strong>3. 再生リストのIDを調べる</strong></h3>\n<p>再生リストを表示したい場合は、再生リストIDというのが必要なようでした。<br>\nチャンネルIDとかも必要なのかなと思っていましたが、それは必要なかったです。</p>\n<p>再生リストIDは、例えば<br>\n<a href="https://www.youtube.com/playlist?list=PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx" target="_blank">https://www.youtube.com/playlist?list=PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx</a><br>\nの再生リストのIDは、</p>\n<pre><code class="hljs">PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx\n</code></pre>\n<p>のように、URLの最後の部分になるようです。</p>\n<h3><strong>4. Ajaxでリクエストを投げてレスポンスを表示する</strong></h3>\n<p>Youtube Data API v3のガイドだと、リクエストURLに <code>?part=</code> とかを付けて、受け取ってねとありましたが、<br>\njQueryとかだと、下記のようにリクエストを投げても、無事に欲しいレスポンスが返ってくるので、自分はこっちで実装しました。</p>\n<pre><code class="hljs language-js">$.ajax({\n  <span class="hljs-attr">type</span>: <span class="hljs-string">\'get\'</span>,\n  <span class="hljs-attr">url</span>: <span class="hljs-string">\'https://www.googleapis.com/youtube/v3/playlistItems\'</span>, <span class="hljs-comment">// リクエストURL</span>\n  dataType: <span class="hljs-string">\'json\'</span>,\n  <span class="hljs-attr">data</span>: {\n    <span class="hljs-attr">part</span>: <span class="hljs-string">\'snippet\'</span>, <span class="hljs-comment">// partは必須で指定が必要とのこと。レスポンスで返してもらいたいデータをカンマ区切りで指定する。snippetがあればとりあえず動画を再生するレスポンスが受け取れる。</span>\n    playlistId: <span class="hljs-string">\'PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx\'</span>, <span class="hljs-comment">// 再生リストID</span>\n    maxResults: <span class="hljs-number">20</span>, <span class="hljs-comment">// デフォルトは5件までしか受け取らないので、取得件数を変更</span>\n    key: <span class="hljs-string">\'{APIキー}\'</span>\n  }\n}).done(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) </span>{\n  <span class="hljs-comment">// 成功</span>\n}).fail(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-comment">// エラー</span>\n});\n</code></pre>\n<p>これで入力項目が問題なければ、成功するので、<br>\nあとは、返ってきた <code>response</code> から動画を表示させれば良いです。</p>\n<pre><code class="hljs language-js">response.items.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>{\n    <span class="hljs-keyword">var</span> id = item.snippet.resourceId.videoId;\n    $(<span class="hljs-string">\'#list\'</span>).append(<span class="hljs-string">\'&amp;lt;iframe width="560" height="315" src="https://www.youtube.com/embed/\'</span>+ id +<span class="hljs-string">\'" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;\'</span>);\n});\n</code></pre>\n</section>\n'},418:function(n,e,t){"use strict";t.r(e),e.default='<section><p>MacのローカルにPHP環境構築して、<a href="https://www.browsersync.io/" target="_blank">BrowserSync</a>でLiveReloadさせた時のMEMOです。</p>\n<h2>実装方法</h2>\n<p>調べた結果、<a href="https://www.npmjs.com/package/gulp-connect-php" target="_blank">gulp-connect-php</a>を使うのが早そうでした。</p>\n<pre><code class="hljs language-shell"><span class="hljs-meta">$</span><span class="bash"> npm init -y</span>\n<span class="hljs-meta">$</span><span class="bash"> npm install -D gulp gulp-connect-php browser-sync</span>\n</code></pre>\n<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> gulp        = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'gulp\'</span>);\n<span class="hljs-keyword">var</span> connect     = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'gulp-connect-php\'</span>);\n<span class="hljs-keyword">var</span> browserSync = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'browser-sync\'</span>).create();\n\ngulp.task(<span class="hljs-string">\'connect-sync\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  connect.server({}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    browserSync.init({\n      <span class="hljs-attr">proxy</span>: <span class="hljs-string">\'127.0.0.1:8000\'</span>\n    });\n  });\n\n  gulp.watch([<span class="hljs-string">\'./*.php\'</span>, <span class="hljs-string">\'./*.css\'</span>, <span class="hljs-string">\'./*.js\'</span>]).on(<span class="hljs-string">\'change\'</span>, browserSync.reload);\n});\n\ngulp.task(<span class="hljs-string">\'default\'</span>, [<span class="hljs-string">\'connect-sync\'</span>]);\n</code></pre>\n<p>これで <code>gulp</code> を叩いたら無事に構築出来ました。</p>\n</section>\n'},419:function(n,e,t){"use strict";t.r(e),e.default='<section><p>gitで、プロジェクトのリポジトリ内で、別のsubmoduleを<code>git clone</code>などして、<br>\n更に、そのsubmoduleに変更を加えたりすると下記のような表示となり、<br>\nファイルは変更されているけど、このファイルはsubmoduleで他のリポジトリで管理されているファイルだから<code>untracked content</code>だよ、というようなメッセージが表示される事があります。</p>\n<pre><code class="hljs language-shell">modified:   something/file (modified content, untracked content)\n</code></pre>\n<p>この場合、この変更が特に必要ないものならば、</p>\n<pre><code class="hljs"><span class="hljs-symbol">$</span> cd something/<span class="hljs-keyword">file</span>\n<span class="hljs-symbol">$</span> git checkout .\n</code></pre>\n<p>で変更をなかった事にすれば元には戻るのですが、<br>\n変更が必要なもので、今後はsubmoduleを自分のリポジトリで管理していきたい場合は<br>\n<code>.git</code>を削除する事で、submoduleから外す事ができます。<br>\n<strong>※注意点としては、そのsubmoduleのLicenseには十分気をつけなければいけない事と、そのsubmoduleは元リポジトリの管理から外れるので、以降はpullしてこれない等があります。</strong></p>\n<pre><code class="hljs"><span class="hljs-variable">$ </span>git rm --cached something\n<span class="hljs-variable">$ </span>rm -rf something/.git\n</code></pre>\n<p>これで、submoduleをプレーンなファイルにして(.gitを削除して)、自分のリポジトリ配下のファイルとなります。</p>\n<p>参考: <a href="http://stackoverflow.com/questions/4161022/git-how-to-track-untracked-content">http://stackoverflow.com/questions/4161022/git-how-to-track-untracked-content</a></p>\n</section>\n'},420:function(n,e,t){"use strict";t.r(e),e.default='<section><p>普段のスマホのコーディングでは、かなり多くのユーザーを抱えたWeb開発に携わらせて頂いていますが、<br>\nそうするとCSSアニメーションで「動かない」などの声を頂くことも多くあり、<br>\nどんな書き方をすると、どの端末で動かない事があるのか。<br>\nまたその対応策など、自分の遭遇したもの中心に記載しておこうと思います。</p>\n<h2>transformが含まれた複数プロパティをアニメーションさせた時にAndroid2系で動かない</h2>\n<p><code>「transform + 任意のプロパティ」</code>をアニメーションさせた時に、<br>\nkeyframesの指定が 0% → 100% となっているとAndroid2系で動きません。<br>\nよくある要件としては、<code>「移動させながらopacityを1にする」「縮小しながらopacityを0にする」</code>などでしょうか。</p>\n<p><strong>動かない書き方</strong></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.test</span> {\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">2s</span> infinite;\n}\n@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%   { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 0);     <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>; }\n  100% { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(100px, 0); <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>; }\n}\n</code></pre>\n<p>結論、「100%」→<code>「99.9%,to」</code>と書くと動きますので、<br>\nkeyframesの指定は<code>「99.9%,to」</code>の書き方で統一しておくと良さそうです。</p>\n<p><strong>動く書き方</strong></p>\n<pre><code class="hljs language-css">@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n    0%       { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 0);     <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>; }\n    99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(100px, 0); <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>; }\n}\n</code></pre>\n<p>translateだけのアニメーションでは、「100%」にしても不具合は発生しませんでしたので、<br>\n組み合わせてアニメーションした場合に限り発生するようです。</p>\n<h2>animation-fill-modeを指定すると、Android2系で動かない</h2>\n<p><code>animation-fill-mode</code>は、Android2系がサポートされておらず、<br>\n指定するとアニメーションが動かなくなります。</p>\n<p><strong>動かない書き方</strong></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">background</span>: black;\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">1s</span> forwards;\n}\n@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%       { <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>; }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>; }\n}\n</code></pre>\n<p>この場合、<code>opacity</code>の初期値を予め設定しておき<code>forwards</code>を削除する事でAndroid2系でも動くようになります。<br>\n初め<code>forwards</code>をサポートしてないブラウザは、単に無視されるのかなと思いましたが、指定されていただけで動かなくなりましたので、指定は削除する必要がありそうでした。</p>\n<p><strong>動く書き方</strong></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">background</span>: black;\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">1s</span>;\n}\n</code></pre>\n<h2>擬似要素へのアニメーションがAndroid2,4系で動かない</h2>\n<p><code>:before</code> や <code>:after</code> の擬似要素ですが、PCやiOSは動作確認出来ましたが、Android2,4系でも動かない端末がありました。<br>\n現状、擬似要素へのアニメーションが必要な場合は、<code>span</code>タグなどで代替する必要がありそうです。</p>\n<h2>transformの値を省略すると動かない</h2>\n<p>例えば、「拡大しながら右にアニメーションしたい」という時に、<br>\n下記のように0%時の<code>translateX()</code>を省略すると、Chromeなどでも動作確認出来ませんでした。</p>\n<p><strong>動かない書き方</strong></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">background-color</span>: black;\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">1s</span> infinite;\n}\n@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%       { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">scale</span>(0); }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">scale</span>(1) <span class="hljs-built_in">translateX</span>(100px); }\n}\n</code></pre>\n<p>0%時のプロパティも省略せずに記述することで回避できます。</p>\n<p><strong>動く書き方</strong></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">background-color</span>: black;\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">1s</span> infinite;\n}\n@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%       { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">scale</span>(0) <span class="hljs-built_in">translateX</span>(0); }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">scale</span>(1) <span class="hljs-built_in">translateX</span>(100px); }\n}\n</code></pre>\n<h2>animation-timing-function: steps()はAndroid2系がサポートしていない</h2>\n<p>コマ送りのスプライト画像を準備して、<code>animation-timing-functionのsteps()</code>を使ってコマ送りアニメーションを実装する方法がありますが、Android2系でサポートしていない為、もし実装したい場合はJavaScriptなどを使用する必要がありそうです。</p>\n<p>steps()の実装方法については下記が参考になります。<br>\n<a href="http://www.webcreatorbox.com/tech/css-sprite-steps/">CSSスプライトとstepsを使ってアニメーション画像を作ろう</a></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(../images/heart.png);\n  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">1450px</span> auto;\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">1s</span> <span class="hljs-built_in">steps</span>(29) infinite;\n}\n@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%       { <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>; }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">1450px</span> <span class="hljs-number">0</span>; }\n}\n</code></pre>\n<p>また、<code>animation-timing-function</code>の<code>cubic-bezier()</code>もAndroid2,4系で対応してない端末があるため(5系から正常に動作。)、スマホ案件では、<code>ease-in-out</code>や<code>linear</code>などの基本指定に留めておいたほうがよさそうです..。PCでは問題なさそうです。</p>\n<h2>dispalayとopacityをtransitionさせる時の注意点</h2>\n<p>例えば、最初は<code>display: none;</code>な要素を、class付与のタイミングで<code>display: block;</code>にすると同時にフェードインさせたい時に、<code>transition</code>でアニメーションさせる場合の注意点です。</p>\n<p>下記のように実装すれば問題なさそうに見えますが、一瞬でboxが表示されてしまい意図した動作にならない場合があります。</p>\n<p><strong>意図しない動作の書き方</strong></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">background</span>: black;\n  <span class="hljs-attribute">display</span>: none;\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">-webkit-transition</span>: opacity <span class="hljs-number">1s</span>;\n}\n\n<span class="hljs-selector-class">.box</span><span class="hljs-selector-class">.active</span> {\n  <span class="hljs-attribute">display</span>: block;\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;\n}\n</code></pre>\n<p>こちらの対応策はいくつか方法がありそうですが、<br>\n簡単なものだと<code>animation</code>の<code>keyframes</code>を使用することで回避出来ます。</p>\n<p><strong>意図した動作の書き方</strong></p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n  <span class="hljs-attribute">background</span>: black;\n  <span class="hljs-attribute">display</span>: none;\n}\n\n<span class="hljs-selector-class">.box</span><span class="hljs-selector-class">.active</span> {\n  <span class="hljs-attribute">display</span>: block;\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">1s</span>;\n}\n@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%   { <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>; }\n  100% { <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>; }\n}\n</code></pre>\n<h2>translateとrotateを同時にアニメーションさせる場合は、記述順で動作が異なる</h2>\n<p>こちら色々な端末で確認できましたが、<br>\n例えば、回転させながら横に動かしたい時に、<br>\n下記のような実装をすると意図した動作となります。</p>\n<pre><code class="hljs language-css"><span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;\n  <span class="hljs-attribute">background-color</span>: black;\n  <span class="hljs-attribute">-webkit-animation</span>: hoge <span class="hljs-number">1s</span> infinite;\n}\n@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%       { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(0) <span class="hljs-built_in">rotate</span>(0); }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(100px) <span class="hljs-built_in">rotate</span>(180deg); }\n}\n</code></pre>\n<p>ただ、下記のように<code>rotate</code>プロパティを先に記述してしまうと基準点が変わってしまい、<br>\n意図した動作になりませんでした。</p>\n<pre><code class="hljs language-css">@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> hoge {\n  0%       { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(0) <span class="hljs-built_in">translateX</span>(0) ; }\n  99<span class="hljs-selector-class">.9</span>%,<span class="hljs-selector-tag">to</span> { <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(180deg) <span class="hljs-built_in">translateX</span>(100px); }\n}\n</code></pre>\n<p><code>translate</code>と<code>rotate</code>を組み合わせる場合は、<code>translate</code>を先に書くようにしておくと良さそうです。</p>\n<h2>3d系の指定をすると、Android2系でおかしな挙動となる場合がある</h2>\n<p>端末のGPUを使用する為に、下記のようなプロパティを指定する事があるのですが</p>\n<ul>\n<li>transform: translate3d(0,0,0);</li>\n<li>transform: translateZ(0);</li>\n<li>backface-visibility: hidden;</li>\n</ul>\n<p>指定するとAndroid2系でいくつか不具合があがっているようです。</p>\n<ul>\n<li>フォーム関連要素がページ内にあった場合に、タップ位置が変わったりといった挙動がおかしくなる。</li>\n<li>scale, rotate, skewのtransformプロパティが正常に動作しなくなる。</li>\n<li>特定のCSSプロパティの上書きが反映されなくなる (positionなど)</li>\n</ul>\n<p>JIRAなどでAndroid2系のみおかしな挙動が起きた場合は、<br>\nページ内の3d系プロパティを疑うのも1つの解決方法となりそうです。</p>\n<h2>使用できるプロパティ、使用出来ないプロパティを調べてみたところ...</h2>\n<p>transform系以外のプロパティは、Android2系でも問題なく動作していそうです。<br>\n例: <code>opacity, background-color, box-shadow</code>など。</p>\n<p>transform系でAndroid2系も含めて動作確認出来たのは、<br>\n<code>translateX, translateY, scaleX, scaleY, rotate, skewX, skewY, transform-origin, matrix</code>などでした。</p>\n<p>Android2系で、動作確認出来なかったプロパティは、<br>\n<code>translateZ, rotateX, rotateY, perspective</code>などの3d系プロパティが使えないようです。</p>\n<p>Android2系までサポートしようとすると3D系のアニメーションは厳しい状況です。</p>\n<p>2DのアニメーションであればAndroid2系含めて動作しますので(複雑でたくさん動かしたい場合はパフォーマンス的に厳しそうですが..)、様々な場面で検討していくと良さそうです。</p>\n<h2>不具合への対策まとめ</h2>\n<p>・<code>keyframes</code>は<code>「100%」→「99.9%, to」</code>と書く。<br>\n・<code>animation-fill-mode</code>(bothやforwardsなど)は、Android2系で使えないので注意する。初期値を予め設定しておくと良い。<br>\n・<code>cubic-bezier()</code>は、Android2系では使えない。<br>\n・疑似要素でアニメーションが必要な場合は、<code>span</code>タグなどで代替する。<br>\n・<code>keyframes</code>内の、各％のプロパティは省略せずに記述する。<br>\n・<code>animation-timing-function: steps();</code>はAndroid2系がサポートしていない<br>\n・<code>dispalay</code>と<code>opacity</code>を併用したアニメーションでは、<code>keyframes</code>を使用すると良い。<br>\n・<code>translate</code>と<code>rotate</code>を同時にアニメーションさせる場合は、<code>translate</code>を先に記述する。<br>\n・3d系のプロパティ(<code>translate3d, backface-visibility: hidden;</code>)の指定がある場合は、Android2系で不具合が起きる可能性があることを知っておく。</p>\n<p>以上になります。<br>\n間違ってるところなどありましたら、ご連絡頂けると有難いです。<br>\n今後のCSSアニメーション実装の参考にして頂ければと思います。</p>\n</section>\n'},421:function(n,e,t){"use strict";t.r(e),e.default='<section><p>gitでコンフリした時に、通常だと差分を見て手動で解決していきますが、<br>\nHEAD側か、マージさせた側かに全ての変更を適用したい場合もあったりして、<br>\nその場合は、 <code>git checkout --ours</code> もしくは <code>git checkout --theirs</code> を使うと良いのですが、<br>\nどちらがどちらになるのかよく忘れてしまうので備忘録です。</p>\n<p><img src="/blog/images/git_checkout_ours_theirs.png" alt="git checkout --ours or --theirs"></p>\n<p><code>--ours</code>がHEAD側、<code>--theirs</code>がマージさせた側(自分が直前に作業した内容な事が多そうでしょうか)となるようです。</p>\n</section>\n'},422:function(n,e,t){"use strict";t.r(e),e.default='<section><h1>getComputedStyle</h1>\n<p>普段、jQueryなどを使っていたら <code>.css()</code> などを使うので、ほとんど使わないメソッドだとは思うんですが、ピュア(Vanilla)なJavaScriptでCSSの値を取得したい時は、 <code>window.getComputedStyle()</code> を使うと取得できます。<br>\nIE9以上のモダンブラウザで使用出来ます。</p>\n<p>例えば要素の高さを取得したい時は、下記のように取得できます。</p>\n<pre><code class="hljs"><span class="hljs-keyword">var</span> element = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'target\'</span>);\n<span class="hljs-built_in">window</span>.getComputedStyle(element, <span class="hljs-keyword">null</span>).height; <span class="hljs-comment">// `30px` など</span>\n</code></pre>\n<p>第一引数が取得したいDOM要素、第二引数は基本的にnullで <code>:before</code> 要素とかを取得したい時に \':before\' などを指定すると良さそうです。</p>\n<h1>parseIntとparseFloat</h1>\n<p>この時、例えば <code>30px</code> など <code>px</code> が入った文字列が取得できるのですが、これを <code>30</code> など数値のみに変換したい事も出てきます。<br>\n自分は数値変換では <code>Number()</code> を使う事が多いんですが、 <code>Number()</code> だと数値に変換出来ない文字列があった場合は <code>NaN</code> を返してしまうので、この場合は使えません。</p>\n<p>正規表現でやるのかなと思いましたがそんな事はなく、 <code>parseInt()</code> や <code>parseFloat()</code> を使うと柔軟に対応してくれそうです。<br>\n<code>parseInt()</code> は整数だけを解析、 <code>parseFloat()</code> は整数と浮動小数点の両方を解析してくれて、両方とも文字列の前の空白や最後の数値変換出来ない文字列は無視してくれます。</p>\n<pre><code class="hljs"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">\'30px\'</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// 30</span>\n</code></pre>\n<p>無事に数値のみ取得できました。<br>\n良くわかってなかった部分の備忘録でした。</p>\n</section>\n'},423:function(n,e,t){"use strict";t.r(e),e.default='<section><p>とある案件で、webpack + AutoPrefixerを使ってて、<br>\nCSSの出力結果から <code>display: -webkit-flex;</code> とかが何故か抜けててしまってて、<br>\nAndroid4系とかの一部端末で横並びが効いてない事があったので、その時の実装メモ。</p>\n<p><a href="https://github.com/postcss/autoprefixer#no-prefixes-in-production">AutoPrefixerのドキュメント</a>に記載がありましたが、<br>\n原因は、webpackとかのビルドツールにもAutoPrefixerが含まれていて、<br>\nそのツールを使ってAutoPrefixerを使うとそのツールの<br>\nデフォルトのブラウザリストを使うので、<br>\n結果的にプレフィックスを削除するよ、的な事のようでした。</p>\n<p>AutoPrefixerのブラウザリストの設定は、<br>\n<code>browserslist</code> のファイルをルートに置くか、<br>\npackage.jsonのkeyに <code>browserslist</code> を設定する事が推奨されているようなので、<br>\npackage.jsonに設定を移す事で無事に解決できました。</p>\n<p>webpack2 + ReactでCSSモジュールを構築した時も同じ問題に直面したりして、<br>\nwebpack.config.jsやgulpfile.jsなどに記載していたAutoPrefixerのBrowserlistを、<br>\nこちらの<a href="https://github.com/NaokiOtsu/Tips/blob/master/React/ReactCSSModule/package.json#L26-L30">package.json</a>のように記載して解消されました。</p>\n</section>\n'},424:function(n,e,t){"use strict";t.r(e),e.default='<section><p>とあるAndroidアプリ案件でWebViewのスクロールが重たい報告があがってきました。</p>\n<p>スクロールしようとしてもAndroidはスムーズにいかず、反応が鈍い感じ..<br>\n同じ端末のデフォルトブラウザ(Web)やiOSは特に問題なしで、AndroidのWebViewのみ顕著に重たい状況でした。</p>\n<p>JavaScriptもそれなりに入っているページだったので、<br>\n最初はJavaScriptのリファクタリングを頑張ってましたが、<br>\n頑張ってはみたもののそこまでの改善は見られず..</p>\n<p>また大きい画像もあったのでレンダリング処理に時間かかってるのかなという事で、<br>\n最適な画像を準備するようにしても、あまり変わらず..</p>\n<p>困り果てて調べていたところ、CSSの可能性が。</p>\n<p><a href="https://havelog.ayumusato.com/develop/performance/e569-frontend_performance_memo.html">フロントエンドチューニングの箇条殴り書き ::ハブろぐ</a></p>\n<p><a href="http://www.yoheim.net/blog.php?q=20130713">[CSS] border-radiusとbox-shadowを組み合わせると、それぞれ単体でのスタイルより５倍重たい！？</a></p>\n<p><code>border-radius</code> と <code>box-shadow</code> の組み合わせ。<br>\nどうも今回のケースはこれが原因のようでした。<br>\n<code>box-shadow</code> を無くしたり、<code>border-radius</code>を角丸の画像(懐かしいやり方)に変えたりしたところ、かなり改善されました。</p>\n<p>これらのCSS3系プロパティが重たいというのは聞いてはいたが、ここまでとは。<br>\n特に <code>border-radius</code> と <code>box-shadow</code> の組み合わせは、よくありそうなケースなので注意が必要ですね。<br>\n勉強になりました。</p>\n</section>\n'},425:function(n,e,t){"use strict";t.r(e),e.default="<section><p>Flexboxの子要素にインライン要素(spanとかaタグ)を使用する事があって、<br>\n主要ブラウザの確認では特に問題なかったので普通に使えるんだろうと思ってましたが、<br>\niOS8やAndroid4.2以下辺りではその子要素が消えてしまうようで..勉強不足でした..&gt;&lt;</p>\n<p>子要素に対して、 display: block; を入れて解決でした。<br>\ninline-blockでもいいのかな。</p>\n</section>\n"},426:function(n,e,t){"use strict";t.r(e),e.default='<section><p>2017年でこのポストはだいぶ時代遅れ間がありそうだけど、<br>\nシンプルなSPA構築する時に便利なdirectorの使い方メモ。</p>\n<p>そんなに大きくないアプリケーションとかで、<br>\njQueryとか流行りのフレームワークなしでシンプルにSPA構築したい時に<br>\n自分で一からネイティブに実装しても良いとは思うけど、<br>\nシンプルに使えるdirectorを使うと良さそう。</p>\n<p><a href="https://www.npmjs.com/package/director#history-api">director</a></p>\n<p>Usageに使い方など載ってはいるけど、簡単なexampleを。</p>\n<p>directorのインストール</p>\n<pre><code class="hljs language-bash">yarn init -y\nyarn add director <span class="hljs-comment"># or npm install director --save</span>\n</code></pre>\n<p><code>#/hoge</code>と<code>#/fuga</code>へのアクセスで指定の関数を実行する例だとすると..</p>\n<pre><code class="hljs language-js"><span class="hljs-comment">// app.js</span>\n\n<span class="hljs-keyword">var</span> hoge = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'hoge\'</span>);\n};\n\n<span class="hljs-keyword">var</span> fuga = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'fuga\'</span>);\n};\n\n<span class="hljs-keyword">var</span> routes = {\n  <span class="hljs-string">\'/hoge\'</span>: hoge,\n  <span class="hljs-string">\'/fuga\'</span>: fuga\n}\n\n<span class="hljs-keyword">var</span> route = <span class="hljs-keyword">new</span> Router(routes);\nroute.init();\n</code></pre>\n<p>HTMLで<code>#/hoge</code>、<code>#/fuga</code>のリンク設定。</p>\n<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#/hoge"</span>&gt;</span>#/hoge<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#/fuga"</span>&gt;</span>#/fuga<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./node_modules/director/build/director.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./app.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre>\n<p>小規模サイトでDOM操作もそんなに無いって要件の時は良いかもしれない。</p>\n</section>\n'},427:function(n,e,t){"use strict";t.r(e),e.default='<section><p>webpack2でReact環境を小さく構築する時の備忘録。<br>\nwebpack-dev-serverでローカルサーバーを立ち上げて、Reactで単なる<code>hoge</code>を出力させるまで\b。</p>\n<h3>全体の\b\b構成図</h3>\n<pre><code class="hljs language-bash">\b/\n├public\n  └index.html 本番のhtmlファイル\n└src\n  └index.js 開発時のjsファイル\n.babelrc\npackage.json\nwebpack.config.js\n</code></pre>\n<h3>package.jsonの作成</h3>\n<pre><code class="hljs language-bash">yarn init -y\n</code></pre>\n<h3>dependenciesなモジュールをインストール</h3>\n<pre><code class="hljs language-bash">yarn add react react-dom\n</code></pre>\n<h3>devDependenciesなモジュールをインストール</h3>\n<pre><code class="hljs language-bash">yarn add -D babel-core babel-loader babel-preset-es2015 babel-preset-react webpack webpack-dev-server\n</code></pre>\n<h3>.babelrcをルートに作成</h3>\n<pre><code class="hljs language-json">{\n  <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"es2015"</span>, <span class="hljs-string">"react"</span>]\n}\n</code></pre>\n<h3>srcとpublicの2つのディレクトリを作成</h3>\n<pre><code class="hljs language-bash">mkdir src public\n</code></pre>\n<h3>publicの中に、index.htmlを作成</h3>\n<pre><code class="hljs language-html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ja"</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<h3>webpack.config.jsを作成</h3>\n<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'path\'</span>);\n\n<span class="hljs-keyword">const</span> src_path = path.resolve(__dirname, <span class="hljs-string">\'src\'</span>);\n<span class="hljs-keyword">const</span> public_path = path.resolve(__dirname, <span class="hljs-string">\'public\'</span>);\n\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">entry</span>: <span class="hljs-string">`<span class="hljs-subst">${src_path}</span>/index.js`</span>,\n\n  <span class="hljs-attr">output</span>: {\n    <span class="hljs-attr">path</span>: public_path,\n    <span class="hljs-attr">filename</span>: <span class="hljs-string">\'bundle.js\'</span>\n  },\n\n  <span class="hljs-attr">devServer</span>: {\n    <span class="hljs-attr">contentBase</span>: public_path <span class="hljs-comment">// webpack-dev-serverのルートディレクトリ</span>\n  },\n\n  <span class="hljs-attr">module</span>: {\n    <span class="hljs-attr">rules</span>: [\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.js$/</span>,\n        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,\n        <span class="hljs-attr">use</span>: [\n          { <span class="hljs-attr">loader</span>: <span class="hljs-string">\'babel-loader\'</span> }\n        ]\n      }\n    ]\n  }\n};\n</code></pre>\n<h3>srcの中に、index.jsを作成</h3>\n<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-dom\'</span>;\n\n<span class="hljs-keyword">const</span> App = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hoge<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n);\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>,\n  document.getElementById(\'app\')\n);\n</span></code></pre>\n<h3>package.jsonに&quot;scripts&quot;を追記する</h3>\n<pre><code class="hljs language-json">{\n  ...\n  <span class="hljs-attr">"scripts"</span>: {\n    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"webpack-dev-server"</span>,\n    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"webpack"</span>\n  },\n  ...\n}\n</code></pre>\n<p>ここまでで環境構築が完了したので、<br>\n開発時は、<code>yarn start</code> すると<code>http://localhost:8080/</code>でローカルサーバー(LiveReroad)が立ち上がり、<br>\n本番時は、<code>yarn build</code> するとpublicにbundle.jsが書き出される。</p>\n<p>※ただ<code>yarn build</code>は本番用のminifyなど何も入ってないので、本番用の設定は\b適宜入れる必要がある。<br>\n<a href="https://webpack.js.org/guides/production-build/">https://webpack.js.org/guides/production-build/</a></p>\n<h3>[追記 2017/5/15]</h3>\n<p>PropTypesはクラスのstaticなプロパティで指定するのが流れのようで、<br>\nbabelだと、<code>babel-plugin-transform-class-properties</code>を使う事が多そうなので追記しておく。</p>\n<pre><code class="hljs language-bash">yarn add -D babel-plugin-transform-class-properties\n</code></pre>\n<pre><code class="hljs language-json">{\n  ...\n  <span class="hljs-attr">"plugins"</span>: [<span class="hljs-string">"transform-class-properties"</span>] // 追記\n}\n</code></pre>\n<p>PropTypesの設定例</p>\n<pre><code class="hljs language-js">...\nimport PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">\'prop-types\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{\n  <span class="hljs-keyword">static</span> propTypes = {\n    <span class="hljs-attr">value</span>: PropTypes.number.isRequired,\n    <span class="hljs-attr">onIncrement</span>: PropTypes.func.isRequired,\n    <span class="hljs-attr">onDecrement</span>: PropTypes.func.isRequired\n  }\n  ...\n}\n</code></pre>\n</section>\n'},428:function(n,e,t){"use strict";t.r(e),e.default='<section><p><a href="https://d3js.org/">D3(Data-Driven-Documents)</a>をwebpack2を使ってbundleしてる時に、styleやattrをobjectで設定したかったが、エラーが出てしまうので調べてみると、どうも昔は出来たがモジュールを分けたようで、object形式で指定したい時は、<a href="https://github.com/d3/d3-selection-multi">d3-selection-multi</a>をimportして使ってください、という事だったので使う事にしたけど、うまく行かずハマってしまった...</p>\n<p>つたない英語力で調べていくと、どうもwebpack側の設定が必要そうだった。<br>\n<a href="https://github.com/d3/d3-selection-multi/issues/8">https://github.com/d3/d3-selection-multi/issues/8</a></p>\n<p>まずはwebpack側の設定に下記を追記し、</p>\n<pre><code class="hljs language-js">resolve: {\n  <span class="hljs-attr">alias</span>: {\n    <span class="hljs-string">\'d3\'</span>: <span class="hljs-string">\'d3/index.js\'</span>\n  }\n},\n</code></pre>\n<p>実際に使いたいJSでは、下記のように設定する事で無事に解決できた。</p>\n<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> d3 <span class="hljs-keyword">from</span> <span class="hljs-string">\'d3\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">"d3-selection-multi"</span>;\n\nd3.select(<span class="hljs-string">"body"</span>).append(<span class="hljs-string">"div"</span>)\n  .attrs({\n    <span class="hljs-attr">title</span>: <span class="hljs-string">"A cheery, timeless greeting."</span>,\n    <span class="hljs-attr">class</span>: <span class="hljs-string">"greeting"</span>\n  })\n  .text(<span class="hljs-string">"Hello, world!"</span>);\n</code></pre>\n<p>package.jsonは下記のような形。</p>\n<pre><code class="hljs language-json"><span class="hljs-string">"dependencies"</span>: {\n  <span class="hljs-attr">"d3"</span>: <span class="hljs-string">"^4.8.0"</span>,\n  <span class="hljs-attr">"d3-selection-multi"</span>: <span class="hljs-string">"^1.0.1"</span>\n},\n<span class="hljs-string">"devDependencies"</span>: {\n  <span class="hljs-attr">"babel-core"</span>: <span class="hljs-string">"^6.24.1"</span>,\n  <span class="hljs-attr">"babel-loader"</span>: <span class="hljs-string">"^7.0.0"</span>,\n  <span class="hljs-attr">"babel-preset-es2015"</span>: <span class="hljs-string">"^6.24.1"</span>,\n  <span class="hljs-attr">"webpack"</span>: <span class="hljs-string">"^2.5.1"</span>,\n  <span class="hljs-attr">"webpack-dev-server"</span>: <span class="hljs-string">"^2.4.5"</span>\n}\n</code></pre>\n<p>もうこれからは言い訳抜きで英語力が必要になってきたと感じる今日このごろ..</p>\n</section>\n'},429:function(n,e,t){"use strict";t.r(e),e.default='<section><p>VSCodeはIntelliSenseが良かったり、Emmetがデフォルトで付いて来たりと、ずっと重宝しているエディタの一つ。<br>\n何より日々エディタ自体が改善されている感じが好きで毎回のアップデートが楽しみだったりする。</p>\n<p>そんなVSCodeだけど、業務として1日中コードを書いていると夕方辺りでコードを書くのがだんだん辛くなっていくのが気になっていた。<br>\nVSCodeに限らずどのエディタを使ってもその疲れはくるんだけど、要はマウス操作でファイルを選択したりタブを移動したり、Shiftキーを押しながらコードをコピーしてペーストして、といった感じでホームポジションからどうしても離れないといけない瞬間があり、それが溜まりたまって夕方ぐらいに疲れが押し寄せてくる感じ。</p>\n<p>どうにかもっと効率的に体力使わずコードを書いていきたい。ホームポジションから離れずとなるとvimとかemacsとかか。<br>\nそんな事を思っている時にふとGoogleの凄そうな人のLive CodingをYoutubeで眺めていたら、VSCodeでvimっぽくコーディングしてらっしゃる。<br>\n<a href="https://www.youtube.com/watch?v=X8EQSy-ajo4&amp;t=1559s">https://www.youtube.com/watch?v=X8EQSy-ajo4&amp;t=1559s</a></p>\n<p>あ、これだ。ということでVSCodeでvimのように操作できるvscodevimのプラグインを入れて試してみた。</p>\n<p>結構良い感じ。<br>\n基本はvimのコーディングでホームポジションから離れる事が少なくなった。かつ割り当てたキーバインドで全ファイル検索やサイドバーのファイル移動、ターミナル(tmux)を開いてgitやコマンドが叩けたりしてitermを使う事も少なくなった。<br>\nそして、必要ならマウス操作もこれまで同様に可能だったりする。</p>\n<p>こちらのブログを参考にさせて頂きつつ、自分なりにキーバインドをカスタマイズした。<br>\n<a href="https://qiita.com/y-mattun/items/45776b7e1942edb2f727">https://qiita.com/y-mattun/items/45776b7e1942edb2f727</a></p>\n<p>keybindings.jsonは下記の感じ</p>\n<pre><code class="hljs">[\n    // プロジェクト全体検索の切り替え\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+f"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.findInFiles"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"!searchInputBoxFocus"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+f"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.focusFirstEditorGroup"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"searchInputBoxFocus"</span>\n    },\n\n    // サイドバーのカーソル切り替え\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+j"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.focusSideBar"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorFocus"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+j"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.focusFirstEditorGroup"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"!editorFocus"</span>\n    },\n\n    // 左右にファイルを開いた時の切り替え\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+w ctrl+l"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.focusFirstEditorGroup"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"!editorFocus"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+w ctrl+h"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.focusPreviousGroup"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorFocus"</span>\n    },\n\n    // タブの切り替え\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+h"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.previousEditor"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorFocus &amp;&amp; vim.mode == \'Normal\'"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+l"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.nextEditor"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorFocus &amp;&amp; vim.mode == \'Normal\'"</span>\n    },\n\n    // Insert Modeでのカーソル移動\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+l"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorRight"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus &amp;&amp; !editorReadOnly &amp;&amp; vim.mode != \'Normal\'"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+h"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"cursorLeft"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus &amp;&amp; !editorReadOnly &amp;&amp; vim.mode != \'Normal\'"</span>\n    },\n\n    // Suggestion時\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+k"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"acceptSelectedSuggestion"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+n"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"selectNextSuggestion"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus &amp;&amp; suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+p"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"selectPrevSuggestion"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"editorTextFocus &amp;&amp; suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible"</span>\n    },\n\n    // 検索からファイルに移動する時\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+n"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"search.focus.nextInputBox"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"inputBoxFocus &amp;&amp; searchViewletVisible"</span>\n    },\n\n    // 検索窓を閉じる\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+["</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.closeQuickOpen"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"inQuickOpen"</span>\n    },\n\n    // サイドバーでソースツリーを開いている時\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"r"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"renameFile"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"explorerViewletVisible &amp;&amp; filesExplorerFocus"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"Enter"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"list.select"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"explorerViewletVisible &amp;&amp; filesExplorerFocus"</span>\n    },\n\n    // どこにフォーカスしていても使いたいコマンド。\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+o ctrl+d"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.view.debug"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+o d"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.view.debug"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+o ctrl+g"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.view.scm"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+o g"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.view.scm"</span>\n    },\n\n    // サイドバーの表示切り替え\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"[IntlYen] v"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.view.explorer"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"!explorerViewletVisible &amp;&amp; vim.mode != \'SearchInProgressMode\'"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"[IntlYen] v"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.toggleSidebarVisibility"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"explorerViewletVisible &amp;&amp; !searchViewletVisible &amp;&amp; !inDebugMode &amp;&amp; vim.mode != \'SearchInProgressMode\'"</span>\n    },\n\n    // コマンドパレットオープン\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+o ctrl+o"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.showCommands"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+o o"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.showCommands"</span>\n    },\n\n    // エディター以外のビューから抜けてくるときに\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+w"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.focusActiveEditorGroup"</span>\n    },\n\n    // Emmentをtabで展開\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"tab"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"editor.emmet.action.expandAbbreviation"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"config.emmet.triggerExpansionOnTab &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus"</span>\n    },\n\n    // ターミナル切り替え\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+k"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.terminal.toggleTerminal"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"!terminalFocus &amp;&amp; vim.mode != \'SearchInProgressMode\'"</span>\n    },\n    {\n        <span class="hljs-attr">"key"</span>: <span class="hljs-string">"ctrl+k"</span>,\n        <span class="hljs-attr">"command"</span>: <span class="hljs-string">"workbench.action.terminal.toggleTerminal"</span>,\n        <span class="hljs-attr">"when"</span>: <span class="hljs-string">"terminalFocus &amp;&amp; vim.mode != \'SearchInProgressMode\'"</span>\n    },\n]\n</code></pre>\n<p>今のところこれ以外のキーバインドは自分には必要なさそうだ。<br>\nvimに若干慣れてない感があったり、マルチカーソル、Unde/Redoに不具合があったりしそうだけど、<br>\n許容範囲なのでこれでやっていこうかな。</p>\n</section>\n'},430:function(n,e,t){"use strict";t.r(e),e.default='<section><p>結論、Mac標準のショートカットを使うってことになるけど、<br>\nVSCodeを使っていると、複数ウィンドウを切り替えつつ作業する事がよくある。</p>\n<p>どこかのリポジトリをgit cloneして、ソースを眺めたり、進行中のプロジェクトと見比べたり。</p>\n<p>VSCodeは <code>Control + w</code> でウィンドウ切り替えが出来るけど、<br>\n<code>一覧を呼び出す</code> → <code>選ぶ</code> の操作が必要で、だんだん煩わしくなってくる。<br>\n<code>Command + Tab</code>のように次のワークスペースに片手でパッパッと切り替えたいなぁと思ってた。</p>\n<img src="/images/2018-08-25/vscode-shortcuts.png" width="80%">\n<p>方法はMac標準のショートカットを使うってことになるけど、<br>\n<code>システム環境設定</code> → <code>キーボード</code> → <code>ショートカット</code>タブの → <code>キーボード</code> の <code>次のウィンドウを操作対象にする</code><br>\nを使うと良さそう</p>\n<img src="/images/2018-08-25/vscode-image1.png" width="80%">\n<img src="/images/2018-08-25/vscode-image2.png" width="80%">\n<p>このショートカット、デフォルトは <code>option + F1</code> とかになってて、<br>\nそのままだと使い辛いので、自分は <code>option + tab</code> に変えてる<br>\n今のところ、快適に作業出来てるし特に問題ないかなぁ。</p>\n</section>\n'},431:function(n,e,t){"use strict";t.r(e),e.default='<section><p>最近、CSSアニメーションにおけるGPUについて調べる事があったので、まとめてみた。</p>\n<h1>GPUとCPU</h1>\n<p>CSSアニメーションのパフォーマンスを改善する際に、GPU,CPUで処理する考え方が必要になってくる。</p>\n<h2>GPUとは</h2>\n<p><code>GPU(Graphics Processing Unit)</code> ・・・ 画像処理を担当する部品の１つ</p>\n<h2>CPUとは</h2>\n<p><code>CPU(Central Processing Unit)</code> ・・・ コンピュータの制御や演算や情報転送をつかさどる中枢部分</p>\n<h1>なぜGPUがパフォーマンス改善に役立つのか</h1>\n<p>通常はCPUのみでアニメーションの演算や描画までを行っている。<br>\nただ描画性能が高いGPUに描画処理を任せる事で、描画パフォーマンスが改善が期待出来る。<br>\nこのGPUに描画処理を任せる行為を、 <code>ハードウェアアクセラレーション</code> と呼んでいる。</p>\n<h2>ブラウザにおけるハードウェアアクセラレーション</h2>\n<p>通常ブラウザは、表示するページを1枚の絵として描画する。<br>\nハードウェアアクセラレーションが適用された要素は、一枚の絵の上に別レイヤーを作る。<br>\n処理を切り離してGPUで処理させることで、処理を最適化させる事ができるという仕組み。</p>\n<p><a href="http://jsfiddle.net/zFUVd/9/" target="_blank" rel="noopener">ハードウェアアクセラレーションが適用されているイメージ</a>を作っている方がいらっしゃった。</p>\n<h2>ハードウェアアクセラレーションを適用させるには</h2>\n<p>下記のプロパティを使ったCSSアニメーションはGPU処理となる。</p>\n<ul>\n<li>opacity</li>\n<li>translate</li>\n<li>rotate</li>\n<li>scale</li>\n<li>3D系プロパティ(translate3D, scale3d, rotate3dなど)</li>\n</ul>\n<h1>GPU処理されているか確認する</h1>\n<p>Chrome DevToolsの <code>Rendering</code> を見る事で実際にGPU処理されているか確認出来る。</p>\n<p>具体的に下記の確認できる。</p>\n<ul>\n<li>再描画されている要素</li>\n<li>GPUレイヤーで生成されている要素</li>\n<li>FPSなどの計測</li>\n</ul>\n<h1>topやleftなどのプロパティをGPU処理させるには</h1>\n<p>topやleftなどもGPUレイヤーで処理させる事が出来る。<br>\n下記のプロパティの<code>いずれかを</code>一緒に当てると、<code>GPUレイヤーが生成されGPU処理</code>となる。</p>\n<ul>\n<li>backface-visibility: hidden;</li>\n<li>transform: translateZ(0);</li>\n<li>transform: translate3d(0, 0, 0);</li>\n</ul>\n<p>ただやはり移動させる系のプロパティは、translateやtranslate3dを使った方がパフォーマンスには良いとのこと。</p>\n<p><a href="http://jsfiddle.net/eVtbM/30/" target="_blank" rel="noopener">GPU適用のExample</a></p>\n<h1>注意点: GPU処理もやりすぎると逆にパフォーマンスは落ちてしまう..</h1>\n<p>とても良さそうに見えるGPU処理。<br>\nだけどGPU処理もレイヤーを生成させて管理するコストがかかっている。<br>\nやりすぎると逆にCPUへの負荷が高まりパフォーマンス低下を招いてしまうもよう。</p>\n<p><code>GPU処理によるデメリット</code></p>\n<ul>\n<li>アニメーションのチラツキ</li>\n<li>動作が重くなる</li>\n<li>描画崩壊</li>\n<li>ゴミがつく</li>\n</ul>\n<p>※ハック的にGPUレイヤーを生成する <code>transform: translate3d(0, 0, 0);</code> などの指定も、多用しすぎると上記の現象が起きてしまうので、注意が必要そう。</p>\n<p>具体的には、下記の点に気をつけると良さそうだった。</p>\n<ul>\n<li>GPU処理させている要素がたくさんありそうな時に注意する</li>\n<li>GPU処理させる要素に子要素が必要な場合は出来る限り少なくする</li>\n<li>使用してない要素は、display:none;かGPU処理を切るようにする</li>\n<li>bodyタグなど包括しているタグに、transform: translateZ(0);は指定しない</li>\n<li>GPU処理もCPUへのコストがかかっている事を意識しておく</li>\n<li>モバイルは特にブラウザの性能が低い事を知っておく</li>\n</ul>\n<p>GPUを考慮して、快適なCSSアニメーションライフを送っていきたいですね..!</p>\n</section>\n'},432:function(n,e,t){"use strict";t.r(e),e.default='<section><p>開発していて、バグに遭遇するとGoogle先生に頼ることは多い<br>\nそんな時に日本語サイトでピンポイントにそのバグの解消法が載っていたらラッキーで、<br>\nほとんどの場合、海外の<code>Stack Overflow</code>かGitHubの<code>Issue</code>で解決に導かれることが多い</p>\n<p>そうなると英語圏のググり力が大事になってくるけど、そんな時の「自分はこうやってます」メモ<br>\n<code>いやいやもっと良い方法あるよ</code>って方は教えて頂けると有り難いです</p>\n<h1>英語圏のサイトをヒットさせるGoogle検索</h1>\n<p>英語圏でGoogle検索したい時、自分は下記のURLを開いて検索してる</p>\n<a href="https://www.google.com/webhp?gl=us&hl=en&gws_rd=cr&pws=0" target="_blank" rel="noopener">\n  https://www.google.com/webhp?gl=us&hl=en&gws_rd=cr&pws=0\n</a>\n<p>英語圏のクエリパラメーターが付いていて、基本的に英語サイトがヒットする<br>\nバグの場合、エラー文言などで検索すると、高い確率で海外の<code>Stack Overflow</code>かGitHubの<code>Issue</code>が上位に表示される</p>\n<p>自分はこのURLをブックマークして、パッと開けるところに置いてる</p>\n<p>この方法を知る前は、Google検索の<code>「設定」</code>から言語を<code>「英語」</code>に変えて検索したりしていた。<br>\nこれでも英語はヒットするけど、操作がめんどくさいのと、英語圏に混じって日本語サイトが表示される事も多かったので、上記のURLに切り替えた</p>\n<h1>公式サイトを見たい時も</h1>\n<p>以前に比べて、公式のドキュメントを見る機会が圧倒的に多くなったと感じているけど、<br>\n公式のドキュメント系も、このURLから検索するとだいたい1番最初にヒットしてくれる</p>\n<p>日本語圏で検索していると<code>「React」</code>なんかで検索しても、大量の日本語の入門記事がヒットして、肝心のReactの公式サイトはヒットしてくれない<br>\n無いかもしれない公式サイトのリンクを求めて、「あってくれ!」と願いながらネットサーフィンすることさえある..(TT)</p>\n<p>という訳で、自分の中では結構重宝している検索方法の紹介でした<br>\nちゃんちゃん</p>\n</section>\n'},433:function(n,e,t){"use strict";t.r(e),e.default='<section><p>JavaScriptで実装してると、配列の中がオブジェクトから成り立ってるという事がよくある</p>\n<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> list = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'ナオケル\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'男性\'</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'ジョーダン\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'男性\'</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'花子\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'女性\'</span> }\n];\n</code></pre>\n<p>そしてこれを操作したい時に、<br>\n<code>ある条件のオブジェクトだけを1つ取り出す</code><br>\nもしくは、<br>\n<code>ある条件のオブジェクトだけにフィルタリングされた配列を取得する</code><br>\nということがままある</p>\n<p>実装自体はすごく簡単だけど、そんな時の備忘録として</p>\n<h1>配列から指定のオブジェクトを1つだけ取り出す</h1>\n<p><code>find()</code>を使うと、配列の中から条件にあった最初の要素を1つ返してくれる<br>\n見つからないときは<code>undifined</code>を返す</p>\n<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find">Array.prototype.find()</a></p>\n<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> list = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'ナオケル\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'男性\'</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'ジョーダン\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'男性\'</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'花子\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'女性\'</span> }\n];\n\n<span class="hljs-keyword">const</span> result = list.find(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.id === <span class="hljs-number">2</span>); <span class="hljs-comment">// idが2の要素を返す</span>\n\n<span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// { id: 2, name: \'ジョーダン\', sex: \'男性\' }</span>\n</code></pre>\n<h1>配列から指定のオブジェクトからなる配列を取得する</h1>\n<p><code>filter()</code>を使うと、関数の条件が<code>true</code>の要素からなる配列を返してくれる<br>\n見つからないときは空の配列を返す</p>\n<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a></p>\n<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> list = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'ナオケル\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'男性\'</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'ジョーダン\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'男性\'</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'花子\'</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'女性\'</span> }\n];\n\n<span class="hljs-keyword">const</span> result = list.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.sex === <span class="hljs-string">\'男性\'</span>); <span class="hljs-comment">// sexが男性の要素の配列を返す</span>\n\n<span class="hljs-comment">/*\n  [\n    { id: 1, name: \'ナオケル\', sex: \'男性\' },\n    { id: 2, name: \'ジョーダン\', sex: \'男性\' }\n  ]\n*/</span>\n<span class="hljs-built_in">console</span>.log(result);\n</code></pre>\n<p>かなり基礎的だけど、<br>\n配列操作はかなり頻繁に起きうるのでしっかり固めたい。</p>\n</section>\n'},434:function(n,e,t){"use strict";t.r(e),e.default='<section><p>このブログは、<a href="https://highlightjs.org/" target="_blank">hightlight.js</a>を使ってソースコードのハイライト表示をしているけど、デフォルトだと横幅を超えると改行されるようになっていて、これを改行させずにスクロールして表示するようにしたいなぁと思ってた。そんな時のCSS。</p>\n<pre><code class="hljs language-css"><span class="hljs-selector-tag">pre</span> {\n  <span class="hljs-attribute">overflow</span>: auto;\n  <span class="hljs-attribute">word-wrap</span>: normal;\n  <span class="hljs-attribute">white-space</span>: pre;\n}\n</code></pre>\n<p>これでスクロールしてソースコード表示出来るように。<br>\nただiOSだとスクロールに引っ掛かりがあるので、さらに <code>-webkit-overflow-scrolling: touch;</code> を入れてスムーズにスクロールするようにした。</p>\n</section>\n'},435:function(n,e,t){"use strict";t.r(e),e.default='<section><p>文章で説明するのが難しいけど、<br>\n家計簿っぽいものを作ってると今日の日付から1年前までの月単位のDateオブジェクトの配列データが欲しかったりする。</p>\n<p>今日が、2018年10月20日だとすると</p>\n<pre><code class="hljs language-js">[\n  Sat Oct <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Thu Sep <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Mon Aug <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Fri Jul <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Wed Jun <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Sun May <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Fri Apr <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Tue Mar <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Tue Feb <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Sat Jan <span class="hljs-number">20</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Wed Dec <span class="hljs-number">20</span> <span class="hljs-number">2017</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {},\n  Mon Nov <span class="hljs-number">20</span> <span class="hljs-number">2017</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0900</span> (日本標準時) {}\n]\n</code></pre>\n<p>こんなDateオブジェクトが入った配列が欲しい時</p>\n<p>これは下記で取得できる</p>\n<pre><code class="hljs language-js">[...Array(<span class="hljs-number">12</span>)].map(<span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(\n    today.getFullYear(),\n    today.getMonth() - index,\n    today.getDate()\n  );\n});\n</code></pre>\n<p>手順的には、</p>\n<ul>\n<li><code>[...Array(12)]</code>で <code>[undefined, undefined, ...]</code>が取れて、それをmapする(今回は12ヶ月分の配列が欲しいので)</li>\n<li><code>new Date(年, 月, 日)</code>で指定した日付のDateオブジェクトが取れるので、<code>today.getMonth() - index</code>で月をデクリメントしつつ\b返してあげる</li>\n</ul>\n<p>単純だけど、一瞬あれどうだっけ？となるのでメモ。</p>\n</section>\n'},436:function(n,e,t){"use strict";t.r(e),e.default='<section><p>いつも<code>rbenv</code>と<code>nvm</code>のコマンド何だっけ？ってググる事になるので、さっと打てるようにメモしておく。</p>\n<h1>rbenv</h1>\n<pre><code class="hljs language-bash">$ rbenv install -l    <span class="hljs-comment"># インストール可能なバージョンを一覧表示</span>\n$ rbenv versions      <span class="hljs-comment"># 現在インストールされているバージョン表示</span>\n$ rbenv install 2.2.0 <span class="hljs-comment"># 指定バージョンをインストール</span>\n$ rbenv global 2.2.0  <span class="hljs-comment"># 指定バージョンをglobalにインストール</span>\n$ rbenv <span class="hljs-built_in">local</span> 2.2.0   <span class="hljs-comment"># 指定バージョンをlocalにインストール</span>\n$ rbenv <span class="hljs-built_in">rehash</span>        <span class="hljs-comment"># ruby -vでバージョン変わらない時とかに</span>\n\n$ <span class="hljs-built_in">cd</span> ~/.rbenv/plugins/ruby-build &amp;&amp; git pull <span class="hljs-comment"># ruby-buildを最新に(rbenv install -l 結果をupdateしたい時)</span>\n</code></pre>\n<h1>nvm</h1>\n<pre><code class="hljs language-bash">$ nvm ls-remote            <span class="hljs-comment"># インストール可能なバージョンを一覧表示</span>\n$ nvm install v9.4.0       <span class="hljs-comment"># 指定バージョンをインストール 切り替えまでするもよう</span>\n$ nvm ls                   <span class="hljs-comment"># 現在インストールされている全バージョンを確認</span>\n$ nvm use v9.4.0           <span class="hljs-comment"># 指定バージョンに変更</span>\n$ nvm <span class="hljs-built_in">alias</span> default v9.4.0 <span class="hljs-comment"># PCのSystemのdefaultバージョンを指定</span>\n</code></pre>\n</section>\n'},437:function(n,e,t){"use strict";t.r(e),e.default='<section><p>GraphQL + Railsな環境で、<br>\nDBの<code>users</code>テーブルの中の<code>id</code>と<code>email</code>を<code>GraphiQL</code>上で取得するところまでのメモ</p>\n<p>最終的に<br>\n<a href="http://localhost:3000/graphiql">http://localhost:3000/graphiql</a><br>\nにアクセスして、下記のクエリを実行して、</p>\n<pre><code class="hljs">query {\n <span class="hljs-built_in"> user </span>{\n    id\n    email\n  }\n}\n</code></pre>\n<p>下記になったらゴールのところまで</p>\n<pre><code class="hljs">{\n  <span class="hljs-attr">"data"</span>: {\n    <span class="hljs-attr">"user"</span>: {\n      <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,\n      <span class="hljs-attr">"email"</span>: <span class="hljs-string">"hoge@example.com"</span>\n    }\n  }\n}\n</code></pre>\n<p>まずはrailsプロジェクトを作成</p>\n<pre><code class="hljs language-bash">rails new graphql-rails-example\n</code></pre>\n<p>DB作成</p>\n<pre><code class="hljs language-bash">rails db:create\n</code></pre>\n<p><code>Gemfile</code>に<code>\'graphql\'</code>を追加(これを書いてる時の最新バージョンは1.8.10)<br>\n※2018年5月ぐらいのバージョン1.8+から<a href="http://graphql-ruby.org/schema/class_based_api">Class-Based API</a>に変わり実装が変わって、<br>\n昔の<code>.define-style</code>な書き方だとエラー出ちゃうので、<code>Class-Based API</code>で実装していく</p>\n<pre><code class="hljs language-ruby">gem <span class="hljs-string">\'graphql\'</span>, <span class="hljs-string">\'~&gt; 1.8.10\'</span>\n</code></pre>\n<p>インストール</p>\n<pre><code class="hljs language-bash">bundle\n</code></pre>\n<p><code>graphql</code>は最初の雛形を作る便利なgenerateがあるので、<br>\nそれを使ってもろもろ必要なファイルを生成(<code>Class-Based API</code>ベースなファイルが生成される)</p>\n<pre><code class="hljs language-bash">rails g graphql:install\n</code></pre>\n<p>これで必要なファイルが生成されるのと同時に、<code>Gemfile</code>に<code>gem \'graphiql-rails\', group: :development</code>が追加されて<br>\n<code>GraphiQL</code>っていうブラウザ上でGraphQLのqueryとかmutationとかを叩いて試せるGUIが操作出来るようになるので、それをインストール</p>\n<pre><code class="hljs language-bash">bundle\n</code></pre>\n<p>ローカルサーバーの立ち上げ</p>\n<pre><code class="hljs language-bash">rails s\n</code></pre>\n<p><a href="http://localhost:3000/graphiql">http://localhost:3000/graphiql</a><br>\nにアクセスして、下記のqueryを実行<br>\n<code>testField</code>が取れるか確認する</p>\n<pre><code class="hljs"><span class="hljs-section">query</span> {\n  <span class="hljs-attribute">testField</span>\n}\n</code></pre>\n<p><code>Hello World!</code>が取れてたらOK!</p>\n<pre><code class="hljs">{\n  <span class="hljs-attr">"data"</span>: {\n    <span class="hljs-attr">"testField"</span>: <span class="hljs-string">"Hello World!"</span>\n  }\n}\n</code></pre>\n<p>今度は本題のDBに格納された値を取得したいので、User Modelを作成</p>\n<pre><code class="hljs language-bash">rails g model User name:string email:string\n</code></pre>\n<p>migrateして、usersテーブルを作成</p>\n<pre><code class="hljs language-bash">rails db:migrate\n</code></pre>\n<p><code>GraphQL</code>用のgenerateコマンドが準備されてるので、<br>\nそれを使ってUser Typeを生成する</p>\n<pre><code class="hljs language-bash">rails g graphql:object User id:Int! email:String\n</code></pre>\n<p>これで<code>app/graphql/types/user_type.rb</code>が生成される<br>\nそして、実際にDBの中にデータを入れるので<code>rails c</code>して</p>\n<pre><code class="hljs language-bash">rails c\n</code></pre>\n<p>1件データを挿入</p>\n<pre><code class="hljs language-ruby">User.create!(<span class="hljs-symbol">id:</span> <span class="hljs-number">1</span>, <span class="hljs-symbol">email:</span> <span class="hljs-string">\'hoge@example.com\'</span>)\n\nUser.count <span class="hljs-comment"># 1</span>\n</code></pre>\n<p>DBに追加したUserを取得したいので、<code>app/graphql/types/query_type.rb</code>に下記を追加する</p>\n<pre><code class="hljs language-ruby">field <span class="hljs-symbol">:user</span>, Types::UserType, <span class="hljs-symbol">null:</span> <span class="hljs-literal">false</span>, <span class="hljs-symbol">resolve:</span> -&gt;(obj, args, ctx) { User.first }\n</code></pre>\n<p><code>resolve</code>のところで、どのデータを返すのか、データを加工して返したいとかロジックを書くことができる<br>\n実際にはログインしているUserを<code>ctx[:current_user]</code>とかで返すことになりそう<br>\n<code>field</code>の書き方は<code>Class-Based API</code>になって変わったので、昔の書き方だとエラーが出る<br>\n今回はサンプルなので、<code>User.first</code>で最初のUserを返すようにした</p>\n<p>graphiqlの方で下記のqueryを実行</p>\n<pre><code class="hljs">query {\n <span class="hljs-built_in"> user </span>{\n    id\n    email\n  }\n}\n</code></pre>\n<p>下記のようにちゃんとデータが取れてたら、OK..!</p>\n<pre><code class="hljs">{\n  <span class="hljs-attr">"data"</span>: {\n    <span class="hljs-attr">"user"</span>: {\n      <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,\n      <span class="hljs-attr">"email"</span>: <span class="hljs-string">"hoge@example.com"</span>\n    }\n  }\n}\n</code></pre>\n<p>参考<br>\nこのYoutubeの解説動画が分かりやすかったです<br>\n<a href="https://www.youtube.com/watch?v=DaznKqh5Ypk">Rails + GraphQL Tutorial - Building a GraphQL API Server</a></p>\n</section>\n'},438:function(n,e,t){"use strict";t.r(e),e.default='<section><p>React Nativeの開発で起きたエラーと解決策のまとめ</p>\n<h1>Print: Entry, “:CFBundleIdentifier”, Does Not Existのエラー</h1>\n<p><code>react-native init hogehoge</code> して<br>\n<code>react-native run-ios</code>した時に出たエラー<br>\n”:CFBundleIdentifier”が見つからないもよう</p>\n<h2>解決策</h2>\n<p><code>/ios/プロジェクト名.xcodeproj</code>をXcodeで開いて、File → Project Settingsのメニューの中から「Advanced」を選択して、下記のように設定すると良かった。</p>\n<img src="/images/2018-11-04/xcode.png" width="80%">\n<p>もしくは別の解決策で、</p>\n<pre><code class="hljs language-bash">npm i -g react-native-git-upgrade\nreact-native-git-upgrade\n</code></pre>\n<p>でも直った。<br>\n※さらに、<code>react-native upgrade</code>でも直るっぽいけど、<code>react-native-git-upgrade</code>が公式にも載ってるupgradeの方法のようで、<code>react-native upgrade</code>は<a href="https://stackoverflow.com/a/37505341">iOS全体の設定を上書きするような記載</a>もあるのでやらない方が吉なのかも。</p>\n<h3>参考</h3>\n<p><a href="https://www.haneca.net/react-native-cfbundleidentifier-error/">https://www.haneca.net/react-native-cfbundleidentifier-error/</a><br>\n<a href="https://stackoverflow.com/questions/37461703/print-entry-cfbundleidentifier-does-not-exist">https://stackoverflow.com/questions/37461703/print-entry-cfbundleidentifier-does-not-exist</a></p>\n<h1>Couldn\'t find preset &quot;module:metro-react-native-babel-preset&quot;のエラー</h1>\n<p><code>yarn test</code> や<code>react-native upgrade</code>した時に下記のようなエラーが出た</p>\n<pre><code class="hljs">Couldn\'<span class="hljs-built_in">t</span> <span class="hljs-built_in">find</span> preset <span class="hljs-string">"module:metro-react-native-babel-preset"</span> relative to directory <span class="hljs-string">"/Users/naokiotsu/Desktop/git/naokiotsu/sandpit/ReactNative/rnt4"</span>\n</code></pre>\n<h2>解決策</h2>\n<p>babel6 → babel7への橋渡しが必要なようで、<br>\n<code>yarn add --dev babel-core@^7.0.0-bridge.0 @babel/core</code> して<br>\n<code>.babelrc</code> → <code>babel.config.js</code> にリネームして、</p>\n<pre><code class="hljs"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">api</span>) </span>{\n  api.cache(<span class="hljs-literal">true</span>);\n\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">presets</span>: [<span class="hljs-string">"module:metro-react-native-babel-preset"</span>]\n  };\n};\n</code></pre>\n<p>を記述すると無事テストも通るようになった</p>\n<p><code>babel.config.js</code>は<a href="https://github.com/babel/babel/blob/master/babel.config.js">babel自身</a>も使っていて、<code>.babelrc</code>より推奨されてるみたい。でもなぜ<code>react-native init</code>した時のデフォルトが<code>.babelrc</code>なのかは分からない。</p>\n<h3>参考</h3>\n<p><a href="https://github.com/facebook/react-native/issues/21241#issuecomment-431464191">https://github.com/facebook/react-native/issues/21241#issuecomment-431464191</a></p>\n</section>\n'},439:function(n,e,t){"use strict";t.r(e),e.default='<section><p>ReactNative v0.57以降はTypeScriptがデフォルトから書けるということでやってみたら確かに出来たので、構築方法の備忘録。<br>\n<a href="https://qiita.com/Nkzn/items/cf1516136d2db981fbb9">https://qiita.com/Nkzn/items/cf1516136d2db981fbb9</a></p>\n<p>まずはReactNativeプロジェクトをinitで作成。</p>\n<pre><code class="hljs language-bash">react-native init react-native-typescript\n</code></pre>\n<p>必要なnode_modulesをインストール</p>\n<pre><code class="hljs language-bash">yarn add --dev typescript @types/react @types/react-native\n</code></pre>\n<p>tsconfig.jsonの雛形を作成</p>\n<pre><code class="hljs language-bash">yarn tsc --init --pretty --jsx react\n</code></pre>\n<p>tsconfig.jsonの<code>&quot;allowSyntheticDefaultImports&quot;: true,</code>のコメントアウトを外す</p>\n<p>以上で完了なので、iosを立ち上げてみる。</p>\n<pre><code class="hljs language-bash">react-native run-ios\n</code></pre>\n<img src="/images/2018-11-12/iphone3.png" width="50%">\n<p>完了!</p>\n</section>\n'},440:function(n,e,t){"use strict";t.r(e),e.default='<section><p>ReactNativeというわけではないけど、iOSとAndroidのアプリのアイコンをデフォルト画像から自前で準備したアイコンに設定する時のメモ。と言っても驚くほど簡単だった。</p>\n<h1>アプリのアイコン画像を準備する</h1>\n<p>まずは画像の準備から。<br>\nアイコンサイズは <code>1024 x 1024</code> で準備しとく。</p>\n<img src="/images/2018-11-23/icon.png" width="20%">\n<p>たぶんPhotoshopやXDを使って作成すると、サイズ別で書き出しが出来ると思うけど、それらが無い場合はそれぞれのサイズに書き出してくれるWebサービスを使っても出来そう。パッと試したい時とか。</p>\n<p>使ったのは下記のサービス<br>\n<a href="https://resizeappicon.com/">App Icon Resizer</a></p>\n<p>ここに画像をアップロードすると、iOS,Androidに必要なアイコンをサイズ別でダウンロードすることが出来る。これらをダウンロードして手元に持っておく。</p>\n<h1>iOSでアプリのアイコンを設定する</h1>\n<p>iOSの場合はXCodeからアイコン設定出来る<br>\nXcodeでプロジェクトを開く(<code>/ios/hoge.xcodeproj</code>をXcodeで開く)</p>\n<p>下記のキャプチャのように <code>images.xcassets</code> → <code>AppIcon</code> をクリックすると、サイズ別にアプリアイコンが設定出来るので、そこに画像をドラッグ&amp;ドロップで格納していく。</p>\n<img src="/images/2018-11-23/xcode.png" width="50%">\n<p>これで<code>react-native run-ios</code>して、シミュレーター上でもアイコンが変更されてたらOK!</p>\n<img src="/images/2018-11-23/iphone.png" width="50%">\n<h1>Andoirdでアプリのアイコンを設定する</h1>\n<p>Android側はAndroid Studioは使わない。ディレクトリに画像を入れるのみ。入れる場所は、<code>/android/app/src/main/res/</code>の直下に、<br>\n<code>mipmap-mdpi</code><br>\n<code>mipmap-hdpi</code><br>\n<code>mipmap-xhdpi</code><br>\n<code>mipmap-xxhdpi</code><br>\n<code>mipmap-xxxhdpi</code><br>\nのサイズ別のディレクトリがあって、すでにデフォルトのアプリアイコンの画像が格納されているので、そこの画像を差し替えする。</p>\n<p>画像サイズは下記のように格納する<br>\n<code>mdpi → 48 x 48</code><br>\n<code>hdpi → 72 x 72</code><br>\n<code>xhdpi → 96 x 96</code><br>\n<code>xxhdpi → 144 x 144</code><br>\n<code>xxxhdpi → 192 x 192</code></p>\n<p>この<code>mipmap-mdpi</code>などのディレクトリ名と<code>ic_launcher.png</code>のファイル名は変更出来て、<code>android/app/src/main/AndroidManifest.xml</code>の<code>android:icon=&quot;@mipmap/ic_launcher&quot;</code>で管理されている。</p>\n<p>またAndroid7.1からはアプリアイコンに丸いアイコンが追加されて<code>AndroidManifest.xml</code>で従来のアイコンの他に<code>android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</code>を指定しておくと、対応デバイスで丸いアイコンが表示されるようになったもよう。</p>\n<p>差し替えた状態で<code>react-native run-android</code>してシミュレーター上でもアプリアイコンが変わっていたらOK!</p>\n<img src="/images/2018-11-23/android.png" width="50%">\n<p>シミュレーターでうまくいってたら実機側も問題なくアイコン画像変わってた! おしまい。</p>\n</section>\n'},441:function(n,e,t){"use strict";t.r(e),e.default='<section><p>基本的には下記のサイトが非常に参考になった。<br>\n<a href="https://qiita.com/geerpm/items/78e2b85dca3cb698e98d">SSRをやめる。OGP対応はLambda@Edgeでダイナミックレンダリングする。</a></p>\n<p>この記事ではPuppeteerは使っていないが、Puppeteerで目的のダイナミックレンダリングが出来そうだったのでやってみた。</p>\n<p>基本的に上記のやり方を参考に進めて、キモであるダイナミックレンダリングするところだけ、Puppeteerを使うように変更した。今回は主にその部分の備忘録。ServerlessもWebpackも使っていない。</p>\n<h1>全体の流れ</h1>\n<p>まずはざっくりとした全体の流れから。</p>\n<ol>\n<li><strong>html, css, jsとかのアセットをS3に配置して静的ホスティングする</strong></li>\n<li><strong>そのS3をCloudFront経由で配信する</strong></li>\n<li><strong>LambdaのViewer RequestでUserAgentからボットの判別をして、ボットだったらカスタムヘッダーを付与する</strong></li>\n<li><strong>LambdaのOrigin Requestでボット用のカスタムヘッダーが付いてたらPuppeteerでダイナミックレンダリングする</strong></li>\n</ol>\n<p>Viewer RequestやOrigin RequestなどのLambda@Edgeのライフサイクルイベントについては、<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-edge.html">公式</a>がわかりやすい。</p>\n<p>以下、CloudFrontで配信するのが終わったあとのところから。</p>\n<h1>LambdaのViewer RequestでUserAgentからボットの判別をして、ボットだったらカスタムヘッダーを付与する</h1>\n<p>ほとんど参考記事のままだが、下記のようなViewer Request Functionを準備して、Lambda上のエディタにペーストしてデプロイ。<br>\nやっているのは、UserAgentがクローラーで、かつhtmlへのリクエストだったらダイナミックレンダリング用のカスタムヘッダーをつける、という感じ。</p>\n<pre><code class="hljs language-js"><span class="hljs-meta">"use strict"</span>;\n\nexports.handler = <span class="hljs-function">(<span class="hljs-params">event, context, callback</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> request = event.Records[<span class="hljs-number">0</span>].cf.request;\n  <span class="hljs-keyword">const</span> headers = request.headers;\n\n  <span class="hljs-keyword">const</span> crawlers = [\n    <span class="hljs-string">"Googlebot"</span>,\n    <span class="hljs-string">"facebookexternalhit"</span>,\n    <span class="hljs-string">"Twitterbot"</span>,\n    <span class="hljs-string">"bingbot"</span>,\n    <span class="hljs-string">"msnbot"</span>\n  ];\n\n  <span class="hljs-keyword">const</span> excludeExtentions = [\n    <span class="hljs-string">"jpg"</span>,\n    <span class="hljs-string">"png"</span>,\n    <span class="hljs-string">"gif"</span>,\n    <span class="hljs-string">"jpeg"</span>,\n    <span class="hljs-string">"svg"</span>,\n    <span class="hljs-string">"css"</span>,\n    <span class="hljs-string">"js"</span>,\n    <span class="hljs-string">"json"</span>,\n    <span class="hljs-string">"txt"</span>,\n    <span class="hljs-string">"ico"</span>,\n    <span class="hljs-string">"map"</span>\n  ];\n\n  <span class="hljs-keyword">const</span> dynamicRenderHeaderName = <span class="hljs-string">"X-Need-Dynamic-Render"</span>;\n\n  <span class="hljs-keyword">const</span> extention =\n    request.uri === <span class="hljs-literal">null</span> || request.uri === <span class="hljs-string">"/"</span>\n      ? <span class="hljs-string">""</span>\n      : request.uri\n          .split(<span class="hljs-string">"."</span>)\n          .pop()\n          .toLowerCase();\n  <span class="hljs-keyword">const</span> maybeHtml = !excludeExtentions.some(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e === extention);\n\n  <span class="hljs-keyword">const</span> isCrawler = crawlers.some(<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> {\n    <span class="hljs-keyword">return</span> headers[<span class="hljs-string">"user-agent"</span>][<span class="hljs-number">0</span>].value.includes(c);\n  });\n\n  <span class="hljs-comment">// UserAgentがクローラーで、かつhtmlへのリクエストだったらカスタムヘッダーをつける</span>\n  <span class="hljs-keyword">if</span> (isCrawler &amp;&amp; maybeHtml) {\n    request.headers[dynamicRenderHeaderName.toLowerCase()] = [\n      {\n        <span class="hljs-attr">key</span>: dynamicRenderHeaderName,\n        <span class="hljs-attr">value</span>: <span class="hljs-string">"true"</span>\n      }\n    ];\n  }\n\n  callback(<span class="hljs-literal">null</span>, request);\n};\n</code></pre>\n<h1>LambdaのOrigin Requestでボット用のカスタムヘッダーが付いてたらPuppeteerでダイナミックレンダリングする</h1>\n<p>ここの流れとしては、</p>\n<ol>\n<li><strong>npm initしてpackage.jsonを生成</strong></li>\n<li><strong>Puppeteerとか必要なモジュールをnpm install</strong></li>\n<li><strong>Puppeteerを使ってダイナミックレンダリングの処理を書く</strong></li>\n<li><strong>実装が終わったら、node_modulesとかも含めてzip圧縮してLambda上からzipでアップロードして、デプロイする</strong></li>\n</ol>\n<p>という感じ。</p>\n<p>Serverlessを使うとzip化してデプロイの作業が効率化出来るので実案件とかだと使った方が良さそうか。</p>\n<p>ローカルの作業場所はどこでも良いので、おもむろに <code>npm init -y</code> とかでpackage.jsonを生成する。<br>\nそして必要なモジュールを<code>npm install</code>していく</p>\n<pre><code class="hljs language-json"><span class="hljs-string">"dependencies"</span>: {\n  <span class="hljs-attr">"@serverless-chrome/lambda"</span>: <span class="hljs-string">"^1.0.0-55"</span>,\n  <span class="hljs-attr">"chrome-remote-interface"</span>: <span class="hljs-string">"^0.27.0"</span>,\n  <span class="hljs-attr">"puppeteer-core"</span>: <span class="hljs-string">"^1.11.0"</span>\n}\n</code></pre>\n<p><code>puppeteer-core</code>じゃなくて<code>puppeteer</code>を普通に<code>npm install</code>すると、Chromiumも一緒にダウンロードしてしまって、そうなるとLambdaの50MBの制限に容易に引っかかってしまう。<br>\nなのでPuppeteer1.7以降から追加された、<code>puppeteer-core</code>をインストールするようにする。</p>\n<p>インストール出来たら実際にPuppeteerを使ってダイナミックレンダリングの実装を<code>index.js</code>に書いていく。</p>\n<pre><code class="hljs language-js"><span class="hljs-meta">"use strict"</span>;\n\n<span class="hljs-keyword">const</span> launchChrome = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@serverless-chrome/lambda"</span>);\n<span class="hljs-keyword">const</span> CDP = <span class="hljs-built_in">require</span>(<span class="hljs-string">"chrome-remote-interface"</span>);\n<span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">"puppeteer-core"</span>);\n\nexports.handler = <span class="hljs-keyword">async</span> (event, context, callback) =&gt; {\n  <span class="hljs-keyword">const</span> dynamicRenderHeaderName = <span class="hljs-string">"X-Need-Dynamic-Render"</span>;\n  <span class="hljs-keyword">const</span> request = event.Records[<span class="hljs-number">0</span>].cf.request;\n  <span class="hljs-keyword">const</span> headers = request.headers;\n\n  <span class="hljs-comment">// クローラーじゃなかったら何もしない</span>\n  <span class="hljs-keyword">if</span> (!headers[dynamicRenderHeaderName.toLowerCase()]) <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, request);\n\n  <span class="hljs-comment">// クローラーだったら、ダイナミックレンダリングする</span>\n  <span class="hljs-keyword">let</span> slsChrome = <span class="hljs-literal">null</span>;\n  <span class="hljs-keyword">let</span> browser = <span class="hljs-literal">null</span>;\n  <span class="hljs-keyword">let</span> page = <span class="hljs-literal">null</span>;\n\n  <span class="hljs-keyword">try</span> {\n    <span class="hljs-comment">// Chromeの立ち上げ</span>\n    slsChrome = <span class="hljs-keyword">await</span> launchChrome();\n\n    <span class="hljs-comment">// WebSocketを使ってPuppeteerと繋げる</span>\n    browser = <span class="hljs-keyword">await</span> puppeteer.connect({\n      <span class="hljs-attr">browserWSEndpoint</span>: (<span class="hljs-keyword">await</span> CDP.Version()).webSocketDebuggerUrl\n    });\n\n    page = <span class="hljs-keyword">await</span> browser.newPage();\n    <span class="hljs-keyword">await</span> page.goto(<span class="hljs-string">"https://ダイナミックレンダリングしたいURL/"</span>, {\n      <span class="hljs-attr">waitUntil</span>: <span class="hljs-string">"networkidle0"</span>\n    });\n    <span class="hljs-keyword">const</span> html = <span class="hljs-keyword">await</span> page.content();\n\n    <span class="hljs-keyword">await</span> browser.close();\n    <span class="hljs-keyword">await</span> slsChrome.kill();\n\n    <span class="hljs-keyword">const</span> response = {\n      <span class="hljs-attr">status</span>: <span class="hljs-string">"200"</span>,\n      <span class="hljs-attr">statusDescription</span>: <span class="hljs-string">"OK"</span>,\n      <span class="hljs-attr">headers</span>: {\n        <span class="hljs-string">"cache-control"</span>: [\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">"Cache-Control"</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">"max-age=100"</span>\n          }\n        ],\n        <span class="hljs-string">"content-type"</span>: [\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">"Content-Type"</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">"text/html"</span>\n          }\n        ],\n        <span class="hljs-string">"content-encoding"</span>: [\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">"Content-Encoding"</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">"UTF-8"</span>\n          }\n        ]\n      },\n      <span class="hljs-attr">body</span>: html.replace(<span class="hljs-string">"&lt;html"</span>, <span class="hljs-string">\'&lt;html style="background: #ff0;"\'</span>) <span class="hljs-comment">// 試しにボットの時だけ背景色を黄色に変えてみる</span>\n    };\n\n    <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, response);\n  } <span class="hljs-keyword">catch</span> (err) {\n    <span class="hljs-keyword">return</span> callback(err);\n  }\n};\n</code></pre>\n<p>こんな感じに。<br>\nボットの時に元のコンテンツに変化がないと、ちゃんとダイナミックレンダリングされてるか分からないので、<code>&lt;html style=&quot;background: #ff0;&quot;&gt;</code>を入れて全体が黄色になればOKという感じにした。</p>\n<p>これが出来たら<code>node_modules</code>や<code>package.json</code>、<code>index.js</code>など含めてzip化する。<br>\nそのzipをLambdaにアップロードしてデプロイする。</p>\n<h1>注意点</h1>\n<h2>Finderの右クリックでzip化してしまうとLambdaで動かした時にエラーが出てしまう</h2>\n<p>zip化はコマンドで行うと問題なかった。<br>\npackage.jsonのある場所で、<code>zip -r app.zip *</code>とかでzipにする。</p>\n<h2>Origin Requestの設定</h2>\n<p>Origin Requestのデフォルトの設定だと、WebSocketでPuppeteerとconnectするところでタイムアウトエラーになってしまった。</p>\n<p>色々試したところ、どうもLambdaの管理画面上で設定できる、メモリとタイムアウトまでの時間を変更する必要があった。<br>\nデフォルトのマシンの性能だと非力すぎて、タイムアウトまでに処理が出来ない、ということのようだ。</p>\n<p>デフォルトの設定から<br>\nメモリ 128MB → 512MB<br>\nタイムアウト 3秒 → 30秒<br>\nに変えたところエラーが消えて、無事にPuppeteerがLambda上で動いた。</p>\n<img src="/images/2018-11-30/lambda.png" width="100%">\n<h1>動作確認</h1>\n<p>動作確認は、ChromeのDevToolsの<code>Network conditions</code>から<code>Googlebot</code>をチェックしてサイトにアクセスすることで確認出来る。<br>\nボットの時に黄色のページが表示されて、ボットじゃない時は元のページが表示されればOK。</p>\n<img src="/images/2018-11-30/pc.png" width="100%">\n<p><a href="https://search.google.com/test/mobile-friendly?hl=ja">モバイルフレンドリーテスト</a>もOK</p>\n<img src="/images/2018-11-30/friendly.png" width="100%">\n<p><a href="https://support.google.com/webmasters/answer/6066468?hl=ja">Fetch as Google</a>も問題なさそう。<br>\n<img src="/images/2018-11-30/fetch.png" width="100%"></p>\n<h1>まとめ</h1>\n<p>Lambda + Puppeteerでダイナミックレンダリングが出来た。<br>\nLambdaの仕組みからよく分かってなかったのでキャッチアップしながら進めて、内容的にもそこまで難しくもないだろうと思っていたが、Lambdaの50MBの制限やメモリを上げないといけなかった事とかハマるポイントはあった。<br>\n実際は<code>LambdaでPuppeteerを動す</code>が出来たらあとはhtml取得して返すだけなので、動かすところまでがキモになりそう。</p>\n<p>おしまい。</p>\n</section>\n'},442:function(n,e,t){"use strict";t.r(e),e.default='<section><p>ReactNative + Firestoreの環境構築を進めていたけど、結構ハマりポイントがあったので忘れないうちに備忘録。</p>\n<p>基本的には下記の公式ドキュメントを元に進めていく。<br>\n<a href="https://rnfirebase.io/docs/v5.x.x/installation/initial-setup">https://rnfirebase.io/docs/v5.x.x/installation/initial-setup</a></p>\n<p>まずはプロジェクトの作成から</p>\n<pre><code class="hljs language-bash">react-native init hogehoge\n<span class="hljs-built_in">cd</span> hogehoge\n</code></pre>\n<p>必要なモジュールをインストール</p>\n<pre><code class="hljs language-bash">yarn add react-native-firebase\n</code></pre>\n<p>ここから<code>GoogleService-Info.plist</code>を入れたり、ソースの修正が必要なので、Xcodeを立ち上げる。</p>\n<pre><code class="hljs language-bash">open ios/{PROJECT_NAME}.xcodeproj\n</code></pre>\n<p>Firebaseでプロジェクトを作って、 <code>GoogleService-Info.plist</code> をダウンロード。<br>\nこの辺りは、<a href="https://rnfirebase.io/docs/v5.x.x/installation/initial-setup">ドキュメントを参照</a>してダウンロードまで進める。</p>\n<p>それと、Firestoreを使うので、ブラウザのFirestore上で最初の使いますボタンのポチ、だけは終わらせとく。</p>\n<p><code>GoogleService-Info.plist</code>がダウンロード出来たら、それをXcodeのプロジェクト内にドラッグして入れる。<br>\nその際にリファレンス付けるポップアップが出るので、リファレンス付きで入れるようにする。</p>\n<p>直接Finderなどから<code>ios</code>直下に入れてもダメで、ちゃんとドラッグしてリファレンス付きで入れる必要がある。<br>\nちゃんと入ってないとrun-iosした時にアプリが立ち上がってすぐにエラー画面もなくクラッシュする。</p>\n<p>またXcodeのBundleIDをGoogleService-info.plistのBundleIDと合わせる。<br>\n合わせなくてもrun-iosは走るが、たぶん最終的にXcodeでビルドする時はエラーになる。</p>\n<p>次にXcode上の<code>AppDelegate.m</code>を開いて、先頭に下記を追加。先頭と言ってもファイルの先頭である必要はない。他の<code>#import</code>の下とかで良い。</p>\n<pre><code class="hljs"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Firebase.h&gt;</span></span>\n</code></pre>\n<p>それと、<code>didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>メソッドの下に以下を追加する</p>\n<pre><code class="hljs"><span class="hljs-section">[FIRApp configure]</span><span class="hljs-comment">;</span>\n</code></pre>\n<p>これでXcodeは閉じて良い。</p>\n<p>次に、ターミナル上で、<code>Podfile</code>を生成する</p>\n<pre><code class="hljs"><span class="hljs-attr">cd</span> <span class="hljs-string">ios</span>\n<span class="hljs-attr">pod</span> <span class="hljs-string">init</span>\n</code></pre>\n<p><code>Podfile</code>されるので下記のように編集する。</p>\n<pre><code class="hljs language-bash">platform :ios, <span class="hljs-string">\'9.0\'</span> <span class="hljs-comment"># ここのコメントを外す</span>\n\npod <span class="hljs-string">\'Firebase/Core\'</span>\n\n<span class="hljs-comment"># これはコメントアウトしないとpod install出来ない</span>\n<span class="hljs-comment"># target \'rnf9-tvOSTests\' do</span>\n<span class="hljs-comment">#   inherit! :search_paths</span>\n<span class="hljs-comment">#   # Pods for testing</span>\n<span class="hljs-comment"># end</span>\n</code></pre>\n<p>※注意点<br>\n通常なら、<code>pod \'Firebase/Firestore\'</code>を<code>pod \'Firebase/Core\'</code>の下とかに書いて一緒に入れたいけど、なぜかCoreと一緒にインストールすると、run-ios時にエラーが出て動かない。まずCoreを入れてlinkしてFirebaseの構築が出来た後にFirestoreを入れる手順だと無事動いた。</p>\n<p>その時のエラー文(は？って感じだ。)↓<br>\n<strong>RNFirebase core module was not found natively on iOS, ensure you have correctly included the RNFirebase pod in your projects <code>Podfile</code> and have run <code>pod install</code>.</strong></p>\n<p>上の<code>Podfile</code>の修正が終わったら</p>\n<pre><code class="hljs">pod <span class="hljs-keyword">install</span>\n</code></pre>\n<p>react-native-firebaseをlinkする</p>\n<pre><code class="hljs language-bash"><span class="hljs-built_in">cd</span> ../\nreact-native link react-native-firebase\n</code></pre>\n<p>linkが終わったタイミングで、<code>Podfile</code>にFirestoreを書き足す。</p>\n<pre><code class="hljs language-bash">pod <span class="hljs-string">\'Firebase/Firestore\'</span>\n</code></pre>\n<p>もうFirestoreをインストール</p>\n<pre><code class="hljs">pod <span class="hljs-keyword">install</span>\n</code></pre>\n<p>これで動くはずなので、App.jsに以下を追加。</p>\n<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> firebase <span class="hljs-keyword">from</span> <span class="hljs-string">"react-native-firebase"</span>;\n\nfirebase\n  .firestore()\n  .collection(<span class="hljs-string">"hoge"</span>)\n  .add({\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'入ってーーー\'</span>,\n  });\n</code></pre>\n<p>ちゃんと使えるかチェックする。</p>\n<pre><code class="hljs language-bash">react-native run-ios\n</code></pre>\n<p>エラーなく初期画面が立ち上がって、更新するたびにFirestoreにデータが格納されていけば成功。</p>\n<h1>まとめ</h1>\n<p>Firestoreをpod installするタイミングとかが結構、謎でCoreと一緒のタイミングで入れたいけどダメだった。<br>\nGoogleService-info.plistもディレクトリに単に放り込めば良い的なものを見たが、Xcodeから入れないとダメだった。<br>\n結構、はてなが付く事が多いが、これで開発進められるはず..!</p>\n</section>\n'},443:function(n,e,t){"use strict";t.r(e),e.default='<section><p>Github PagesとかNetlifyなどの静的Webコンテンツを作ったとして、本番デプロイ前にローカルサーバーを立ち上げてサクッと確認したい時のメモ。<br>\n開発中は開発用サーバーでデバッグが基本になると思うけど、実際に <code>yarn build</code> とかで本番用のファイルが書き出されて、ユーザーの元に届くファイルの構成やサイズを確認したい時とかに。<br>\nいくつか方法がありそう。</p>\n<h1>Pythonを使う時</h1>\n<pre><code class="hljs language-bash"><span class="hljs-built_in">cd</span> build\npython -m SimpleHTTPServer\n</code></pre>\n<h1>http-serverを使う時</h1>\n<p><a href="https://github.com/indexzero/http-server">http-server</a></p>\n<pre><code class="hljs language-bash">npx http-server -d build\n</code></pre>\n<h1>serveを使う時</h1>\n<p><a href="https://github.com/zeit/serve">serve</a><br>\nCreate React Appとかで <code>yarn build</code> するとこの方法が載っている</p>\n<pre><code class="hljs language-bash">npx serve -s build\n</code></pre>\n<p>こういう確認の時だけ使うものは <code>npm install http-server -g</code> とかでグローバルに入れずに、npxで都度最新のモジュールをオンデマンドで走らせるのが良さそうですね。</p>\n</section>\n'},444:function(n,e,t){"use strict";t.r(e),e.default='<section><p>React Native(Expo) + Firebaseで<code>「TouchLife」</code>という家計簿アプリを友人と2人で開発して、iOS &amp; Androidアプリとしてリリースしました。</p>\n<div style="display: flex; justify-content: center;  align-items: center; margin-top: 42px;">\n  <div>\n    <img style="width: 100px; margin: 0; padding: 0; border-radius: 16px; box-shadow: 0 0 3px rgba(0,0,0,0.5)" src="/images/2019-05-19/touchlife.png">\n  </div>\n  <div style="margin-left: 20px;">\n    <div style="margin-top: 4px;">\n      <a style="" href="https://itunes.apple.com/app/id1460375602" target="_blank"><img src="/images/2019-05-19/Download_on_the_App_Store_Badge_JP_RGB_blk_100317.svg" style="width: 140px; margin: 0;"></a>\n    </div>\n    <div style="margin-top: 6px;">\n      <a style="" href="https://play.google.com/store/apps/details?id=jp.touchlife" target="_blank"><img src="/images/2019-05-19/google-play-badge.png" style="width: 120px; margin: 0 0 0 10px; transform: scale(1.32)"></a>\n    </div>\n  </div>\n</div>\n<h1>TouchLifeとは</h1>\n<div style="display: flex; overflow-x: scroll; -webkit-overflow-scrolling: touch;">\n  <div>\n    <img src="/images/2019-05-19/capture3.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture1.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture4.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture5.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture7.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture6.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture8.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture9.png" class="touchlife-img">\n  </div>\n  <div>\n    <img src="/images/2019-05-19/capture10.png" class="touchlife-img">\n  </div>\n</div>\n<p>簡単にいうと家計簿アプリです。<br>\n<code>お金をちゃんと把握しようとすると出てくる面倒さを解決</code>する為に作りました。</p>\n<p>通常の家計簿は記録するのがメインになると思いますが、そこから一歩踏み込んで、今月使ったお金が前月と比べてプラスなのかマイナスなのか、食費や交際費など細かい勘定科目で見た時にリアルな数字としてはどうなのか、を計算して分析するという特徴があります。</p>\n<p>特に<code>給料日から今日までに使ったお金が前月のまったく同じ日と比べてどうなのか</code>を計算する同日対比の機能が一番の特徴です。</p>\n<p>これからちゃんとお金を把握していきたいなと思っている方に届けば良いなという思いで、リクルートで働いてる友人と遠隔でやりとりしつつ2人で開発しました。</p>\n<p>普段は自分もエンジニアとして会社に所属しているので、その合間で開発を進めていった感じです。友人が企画 + デザイン、自分がエンジニアリングを担当。</p>\n<p>以下、技術メインで紹介できればと思います。</p>\n<h1>使った技術</h1>\n<ul>\n<li>React Native(Expo)</li>\n<li>Firebase</li>\n<li>React Navigation</li>\n<li>redux + thunk</li>\n<li>Sentry</li>\n<li>Google Analytics</li>\n</ul>\n<h1>React Native(Expo)</h1>\n<img src="/images/2019-05-19/react_native.png" style="width: 288px">\n<img src="/images/2019-05-19/expo.png" style="    width: 130px; margin-bottom: 40px; margin-left: 15px;">\n<p>メインは<a href="https://facebook.github.io/react-native/">React Native</a> + <a href="https://expo.io/">Expo</a>です。<br>\n最初はExpoは使わずReact Nativeのみで開発していましたが、React Nativeのバージョンアップに追従させる時や何か特別なことを入れようとする度に赤いエラー画面になってしまい、機能の実装よりそのエラーの解決に労力が割かれてる感がずっと気になっていました。(アプリ開発経験が豊富じゃないと辛い印象だった。React Native開発の経験値不足もある。)</p>\n<p>これはいかんということでExpoで1から作り直したのですが、この開発体感がびっくりするぐらい良かった。<br>\n基本Expoのレール上の実装になるので機能はExpoで提供されているものに制限されるデメリットはありますが、その分エラーになる事がほとんどなくなり、結果的にそれまでの2倍ぐらいの開発スピードになったと思います。<br>\n今回のアプリの要件がExpoの提供範囲内で十分開発可能だったこともExpo移行の理由でした。</p>\n<p>また今回は遠隔でやりとりしながらの開発だったんですが、Expoの場合、Expo ClientのiPhoneアプリを通じて<a href="https://docs.expo.io/versions/latest/workflow/how-expo-works/#serving-an-expo-project-for-local-development">遠隔地でもビルドなしでiPhoneの実機で確認可能</a>で、これが大変役に立ちました。</p>\n<h1>Firebase</h1>\n<img src="/images/2019-05-19/firebase.png" style="width: 218px">\n<p>ユーザー認証やデータベースへの保存の仕組みが必要で、認証の仕組みが予め備わっていてモバイルアプリに特化している<a href="https://firebase.google.com/">Firebase</a>を使う事にしました。<br>\n主に使った機能は、<code>Authentication、Firestore、Functions, Hosting</code>の4つです。</p>\n<h1>Authentication</h1>\n<ul>\n<li>メールアドレス/パスワード認証</li>\n<li>Facebook/Google認証</li>\n</ul>\n<p>の2つを実装しました。<br>\n特にユーザーの入力したパスワードは<code>Firebase側のみで管理されて自前で管理しなくてよくなる</code>(開発者も知る事ができない)ので、よりセキュア + DBにencryptして保存のような実装もいらなくなるので、その分メインの開発に時間を割く事が出来ました。</p>\n<h1>Firestore</h1>\n<p>ユーザー情報とそれに紐づく支出、収入のデータのDB保存が必要だったので、Firestoreを使いました。<br>\n<code>usersコレクションにユーザーごとのデータ、その中に支出、収入のサブコレクションを持つ構成</code>にしました。<br>\nリリースしたばかりなので無料の範囲内で利用できています。</p>\n<h1>Functions</h1>\n<p>お問い合わせすると、その内容をGmailに送信する必要があったのでFunctionsを使って実装しました。<br>\n内部で<a href="https://www.nodemailer.com/">Nodemailer</a>を使っています。下記の記事が非常に参考になりました。<br>\n<a href="https://qiita.com/ryo2132/items/7cdd6c86dd418095f74a">Vue.js + Firebase functionsでお問い合わせフォームを作成する</a></p>\n<h1>Hosting</h1>\n<p>主に利用規約、プライバシーポリシーの静的ページの為に使いました。<br>\nExpoのWebViewを使って、アプリ内から参照するようにしています。<br>\nまたメール認証した後にアプリに戻すリダイレクトが必要だったため、リダイレクト専用のhtmlファイルも配置しています。</p>\n<p>ゆくゆくはランディングページにも利用する事になりそうです。<br>\nその際は現行のフロントエンドのベストプラクティスが詰まってる<a href="https://ja.nuxtjs.org/">Nuxt</a>の<a href="https://ja.nuxtjs.org/api/configuration-generate">generate</a>で作るのが良いかなと思ってます。(このブログもnuxt generate + markdownです)</p>\n<h1>React Navigation</h1>\n<p>ルーティングとナビゲーションは<a href="https://github.com/react-navigation/react-navigation">React Navigation</a>で実装しました。<br>\n最初は<a href="https://github.com/aksonov/react-native-router-flux">react-native-router-flux</a>を使っていましたが、このモジュール自体がReact Navigationをベースに作られていてReact Navigationの<a href="https://reactnavigation.org/docs/en/getting-started.html">ドキュメント</a>がしっかり準備されていたので、途中からReact Navigationに変更しました。<br>\nこれから始めるならReact Navigationで良い印象です。</p>\n<h1>redux + thunk</h1>\n<p>状態管理は<a href="https://github.com/reduxjs/react-redux">react-redux</a><br>\nまたDBへのアクセス時に非同期通信が必要なので、ミドルウェアは<a href="https://github.com/reduxjs/redux-thunk">redux-thunk</a>を入れました。<br>\n<a href="https://github.com/redux-saga/redux-saga">redux-saga</a>の選択肢もありましたが、thunkの方がなじみがあったのでこちらにしました。</p>\n<h1>Sentry</h1>\n<img src="/images/2019-05-19/sentry.png" style="width: 228px">\n<p>バグ検知はExpoで公式にサポートされている<a href="https://sentry.io/welcome/">Sentry</a>を導入。<br>\nユーザーの端末でエラーが起きるとGmail, Slackに通知が飛ぶようになっています。<br>\n<a href="https://github.com/expo/sentry-expo">sentry-expo</a>を使っていて、今のところ無料範囲内で利用できています。</p>\n<h1>Google Analytics</h1>\n<p>アプリのインストール数などはApp Store Connectのアナリティクスでも確認できますが、具体的な時間帯や詳しい情報も欲しかったのでGoogle Analyticsを導入しました。<br>\n<a href="https://github.com/ryanvanderpol/expo-analytics">expo-analytics</a>を使っています。<br>\nさらに踏み込んだ分析をする場合は、<a href="https://amplitude.com/">Amplitude</a>などを導入すると良さそうです。</p>\n<h1>使用したライブラリ一覧</h1>\n<p>以下、TouchLifeで使った主なライブラリ一覧です。</p>\n<h1>date-fns</h1>\n<img src="/images/2019-05-19/date-fns.png" style="width: 100px;">\n<p><code>5月1日(水)</code>のような日本語にフォーマットされた日付が必要だったので使いました。</p>\n<p><a href="https://github.com/date-fns/date-fns">date-fns</a></p>\n<h1>UltraDate.js</h1>\n<img src="/images/2019-05-19/ultra.png" style="width: 150px;">\n<p><code>給料日が土日祝の場合はその前の平日を取得する</code>などが必要で、そちらが取得できるUltraDate.jsを使いました。<br>\nちゃんと実装すると面倒な祝日やうるう年の計算など、Dateオブジェクトを便利に拡張したライブラリです。</p>\n<p><a href="https://github.com/hrdaya/UltraDate.js">UltraDate.js</a></p>\n<h1>react-native-svg + d3-shape</h1>\n<img src="/images/2019-05-19/May-11-2019 13-52-45.gif" style="width: 182px;">\n<p>円グラフの為に使いました。<br>\n最初は<a href="https://github.com/genexu/react-native-pie-chart">react-native-pie-chart</a>を使っていたのですが、円グラフをアニメーションさせようとするとreact-native-pie-chartだと難しそうでこちらを使いました。(アニメーションしない円グラフだけの表示ならreact-native-pie-chartでも十分だと思います)<br>\n<code>d3-shape</code>で円のデータを作成、それを<code>react-native-svg</code>で描画する流れです。</p>\n<p>下記の記事が参考になりました。<br>\n<a href="https://medium.com/@oriharel/pie-animation-in-react-native-using-svg-55d7d3f90156">Pie animation in React Native using SVG</a></p>\n<p><a href="https://github.com/react-native-community/react-native-svg">react-native-svg</a><br>\n<a href="https://github.com/d3/d3-shape">d3-shape</a></p>\n<h1>formik + yup</h1>\n<img src="/images/2019-05-19/ezgif-4-4cda48b81c3e.gif" style="width: 292px;">\n<p>メールアドレスやパスワードなどフォームのバリデーションが扱いやすくなるので使いました。Reactの<a href="https://reactjs.org/docs/forms.html#fully-fledged-solutions">公式ドキュメント</a>でも紹介されているものです。<br>\n別の選択肢だと<a href="https://github.com/erikras/redux-form">redux-form</a>もあり、こちらはフォームの状態をreduxのstoreに保存するようですが、Reactコミュニティの一般的な見解だとフォームの状態をreduxで管理しない方向のようで、<code>formik</code>や<a href="https://github.com/final-form/react-final-form">react-final-form</a>を使うのが良いとのことでした。</p>\n<p><a href="https://github.com/jaredpalmer/formik">formik</a><br>\n<a href="https://github.com/jquense/yup">yup</a></p>\n<h1>native-base</h1>\n<img src="/images/2019-05-19/ezgif-4-b7a0dbc95f5e.gif" style="width: 294px;">\n<p>主にフォームのセレクトボックスで使用。<br>\n最初セレクトボックスは、<a href="https://github.com/lawnstarter/react-native-picker-select">react-native-picker-select</a>を使っていたのですが、Androidで見た時に表示がおかしかったので、安定していたnative-baseに切り替えました。</p>\n<p><a href="https://nativebase.io/">native-base</a></p>\n<h1>react-native-calendars</h1>\n<img src="/images/2019-05-19/May-11-2019 17-51-11.gif" style="width: 294px;">\n<p>カレンダーの実装に使っています。<br>\n<code>monthFormat={&quot;yyyy年MM月&quot;}</code>などで日本語のフォーマットでカスタマイズ可能なのも良かったです。</p>\n<p><a href="https://github.com/wix/react-native-calendars">react-native-calendars</a></p>\n<h1>react-native-easy-toast</h1>\n<img src="/images/2019-05-19/May-11-2019 17-54-10.gif" style="width: 294px;">\n<p>マイページなどユーザー情報を変更した時の、成功、失敗をユーザーに知らせる目的で使いました。<br>\n表示する位置や色は自由にカスタマイズ出来ます。</p>\n<p><a href="https://github.com/crazycodeboy/react-native-easy-toast">react-native-easy-toast</a></p>\n<h1>react-native-keyboard-aware-scroll-view</h1>\n<img src="/images/2019-05-19/ezgif-4-b16a37b3b4cc.gif" style="width: 294px;">\n<p>画面の下の方にInput要素があると、<code>キーボードが下から出てきた時に入力している部分が隠れてしまい何が入力されているのか分からない問題</code>があったのですが、その部分が隠れないようにスクロールしてくれるモジュールです。自分で実装するとそれなりに大変そうだったので助かりました。</p>\n<p><a href="https://github.com/APSL/react-native-keyboard-aware-scroll-view">react-native-keyboard-aware-scroll-view</a></p>\n<h1>react-native-modal</h1>\n<img src="/images/2019-05-19/ezgif-4-86530604c2b8.gif" style="width: 272px;">\n<p>シンプルなモーダルです。<br>\n簡単に表示、非表示が出来て、スタイルもカスタマイズ可能です。</p>\n<p><a href="https://github.com/react-native-community/react-native-modal">react-native-modal</a></p>\n<h1>react-native-scrollable-tab-view-universal</h1>\n<img src="/images/2019-05-19/ezgif-4-b8cf6619d868.gif" style="width: 294px;">\n<p>タブ切り替えが必要な箇所に使いました。<br>\nスワイプ操作にも対応しているのでUXも良い印象です。<br>\n最初は、<a href="https://github.com/ptomasroos/react-native-scrollable-tab-view">react-native-scrollable-tab-view</a>を使っていましたが、<code>ScrollViewの中で使おうとするとAndroidだけ中の要素が表示されない不具合</code>があり、それが解決されているuniversalを使うことにしました。<br>\nuniversalも<code>react-native-scrollable-tab-view</code>をForkしてるものになるので、この不具合が修正が改善されれば、<code>react-native-scrollable-tab-view</code>で良いと思います。</p>\n<p><a href="https://github.com/turfaa/react-native-scrollable-tab-view-universal">react-native-scrollable-tab-view-universal</a></p>\n<h1>react-native-snap-carousel</h1>\n<img src="/images/2019-05-19/ezgif-4-b97ac0e6144d.gif" style="width: 292px;">\n<p>オープニングやグラフのカルーセルに使いました。<br>\n<code>次や前の月のグラフもちょっと見せるUIにしかった</code>ので、それが可能だったこちらを使いました。</p>\n<p><a href="https://github.com/archriss/react-native-snap-carousel">react-native-snap-carousel</a></p>\n<h1>react-native-walkthrough-tooltip</h1>\n<img src="/images/2019-05-19/May-11-2019 19-16-31.gif" style="width: 294px;">\n<p>ツールチップの表示に使いました。<br>\nアプリの使い方を伝える最初のチュートリアルにも使えそうです。<br>\nツールチップが画面外にはみ出ないように、<code>ライブラリ側で位置を自動計算</code>してくれて使う側がそこを意識しなくてよいのが良かったです。</p>\n<p><a href="https://github.com/jasongaare/react-native-walkthrough-tooltip">react-native-walkthrough-tooltip</a></p>\n<h1>npm-run-all</h1>\n<p><a href="https://www.amazon.co.jp/dp/B07L5W41H4/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1">実践Expo</a>に書いてあって初めて知ったんですが、これが便利でした。<br>\n<code>yarn add -D npm-run-all</code>後に、package.jsonの<code>scripts</code>を下記のように書いておいて、</p>\n<pre><code class="hljs language-json"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-attr">"build:ios"</span>: <span class="hljs-string">"npm-run-all -s ios:*"</span>,\n  <span class="hljs-attr">"ios:run"</span>: <span class="hljs-string">"expo build:ios --non-interactive"</span>,\n  <span class="hljs-attr">"ios:file"</span>: <span class="hljs-string">"mkdir -p .build &amp;&amp; wget \\"$(expo url:ipa)\\" -O .build/app.ipa"</span>,\n},\n</code></pre>\n<p><code>yarn build:ios</code>すると、<code>ios:run</code>や<code>ios:file</code>などの<code>ios:*</code>のscriptsが順番に実行される、というものです。<br>\nこれでipaファイルが<code>.build/app.ipa</code>に生成されるので、後はfastlaneを使ってApp Store Connectにデプロイ → 実機確認 → 申請 → 公開 という感じで無事リリース出来ました。</p>\n<p><a href="https://www.amazon.co.jp/dp/B07L5W41H4/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1">実践Expo</a>は開発の途中からKindle版を買ったんですが、特にExpoを使ったリリース方法 + AnalyticsやSentryの設定方法も載っていて、とても為になりました。Expoで開発する場合はオススメの一冊です。</p>\n<h1>まとめ</h1>\n<p>React Native良いですね。<br>\n開発途中でAndroidで実機確認したんですが、最初にAndroidでiPhoneと同じように動作した時は感動しました。</p>\n<p>また途中からExpoで作り直したのも良かったなと思っています。<br>\n最初はExpoって公式のReact Nativeからちょっと外れたニッチな開発のように感じて、公式から外れるのはどうかな的な感覚があったのですが使ってみると使いやすくて、<code>必要ならejectしていつでも公式のReact Nativeに戻せる</code>というのも移行した理由になりました。</p>\n<p><code>TouchLife</code>も定期的に更新して、常に改善している事を感じてもらえるアプリにしていきたいと思います。<br>\n最後まで読んでいただき、ありがとうございました👍</p>\n</section>\n'},445:function(n,e,t){"use strict";t.r(e),e.default="<section><p>何気なく、日曜日いつものサンデーモーニングからワイドナショーの流れでテレビを見ていたら、陸上の末續慎吾選手が出演されていた。<br>\n北京オリンピック男子4×100mリレーで銀メダルを獲得された陸上界では超有名な方。<br>\n陸上100mで2人目の9秒台が出た!、ということで解説者として出演されていた感じだ。</p>\n<p>その中でコメンテーターから<br>\n<code>「なぜ最近100mで9秒台を出す選手が増えてるのか？」</code><br>\nという質問があり、これに対し末續さんは<br>\n<code>「世界中から早く走る為のデータが簡単に手に入るようになったから」</code><br>\nと即答されていた。</p>\n<p>即答されるということは、常に陸上界に身を寄せていて普段からそう感じる事が多いという事だろうし、たぶんそれが事実なんだと思う。</p>\n<p>これまでの自分の100mへの認識は、生まれつきの才能、つまり体格やバネの強さとかそういうもので全てが決まる競技だと思っていた。<br>\nでも末續さんは、<code>早くなる為の技術を世界中から取り込んで練習に活かせば世界のトップ選手とも張り合えるようになる</code>とおっしゃっていたのだ。</p>\n<p>ここで自分の仕事を見つめ直すことになる。<br>\n自分は、ReactやVueなど使っているものは世界中で使われている技術を使ってはいるものの、ユーザーに良いものを届ける為の技術や仕組みなど、<code>ユーザーが本当に求めているものを作る為の技術を海外の企業(シリコンバレーや中国など)から学ぶ</code>ということがほとんど出来てないんじゃないか。</p>\n<p>海外の有名サービスを使っていると、ワクワク感とかこれはハマるわって感じる事が多い。<br>\nそういうものを作れるようになるには、根底にはReactやVueなどの技術はありつつも、<code>ハマるポイントやワクワク感をユーザーに感じてもらう為の技術</code> ともいうべきか、そういうものを作リ出す技術をそれを実際に生み出しているところから吸収するようにしないと、と思ったりした。</p>\n</section>\n"},446:function(n,e,t){"use strict";var l=t(255);t.n(l).a},447:function(n,e,t){(n.exports=t(21)(!1)).push([n.i,".container[data-v-6b5526b6]{max-width:880px;margin:50px auto;font-size:1.6rem}.container h1[data-v-6b5526b6]{font-size:4.2rem;line-height:5.7rem;font-weight:600}.container .date[data-v-6b5526b6]{text-align:right}.container .contents[data-v-6b5526b6]{margin-bottom:40px;color:#4b4f56}.container .contents[data-v-6b5526b6] h1{margin:60px 0 10px;padding-bottom:10px;font-size:2.6rem;line-height:4.2rem;border-bottom:2px solid #efefef}.container .contents[data-v-6b5526b6] h2{margin:40px 0 0;font-size:2rem;line-height:3rem}.container .contents[data-v-6b5526b6] ul{margin-top:24px}.container .contents[data-v-6b5526b6] li{margin-bottom:4px}.container .contents[data-v-6b5526b6] img{display:inline-block;margin-top:20px;margin-bottom:20px}.container .contents[data-v-6b5526b6] p{margin:20px 0 4px}.container .contents[data-v-6b5526b6] a{text-decoration:underline}.container .contents[data-v-6b5526b6] p code,.container .contents[data-v-6b5526b6] ul code{margin:0 4px;color:#ca454e}.container .contents[data-v-6b5526b6] .hljs{padding:1em 24px;background-color:#364549}.container .contents[data-v-6b5526b6] .touchlife-img{width:340px}.container .sns[data-v-6b5526b6]{display:flex;align-items:center}.container .twitter[data-v-6b5526b6]{margin-right:10px}@media (max-width:900px){.container[data-v-6b5526b6]{margin:20px auto;padding:0 16px}.container h1[data-v-6b5526b6]{margin:0 0 10px;font-size:2.2rem;line-height:3rem}.container .date[data-v-6b5526b6]{margin:0;font-size:1.3rem}.container .contents[data-v-6b5526b6]{line-height:1.6}.container .contents[data-v-6b5526b6] h1{margin:40px 0 0;padding-bottom:6px;font-size:2rem;line-height:3rem;border-bottom:2px solid #efefef}.container .contents[data-v-6b5526b6] h2{margin:30px 0 0;font-size:1.6rem;line-height:2.2rem}.container .contents[data-v-6b5526b6] img{width:100%}.container .contents[data-v-6b5526b6] p{margin-top:12px}.container .contents[data-v-6b5526b6] p code{white-space:normal}.container .contents[data-v-6b5526b6] ul{margin-top:16px;padding-left:30px}.container .contents[data-v-6b5526b6] li{margin-bottom:4px}.container .contents[data-v-6b5526b6] pre{overflow:auto;word-wrap:normal;white-space:pre;-webkit-overflow-scrolling:touch;overflow-scrolling:touch;margin:12px -16px}.container .contents[data-v-6b5526b6] .hljs{padding:1em 16px;-webkit-text-size-adjust:none}.container .contents[data-v-6b5526b6] .touchlife-img{width:245px}}",""])},450:function(n,e,t){"use strict";t.r(e);t(39);var l=t(5),c=(t(48),t(399),t(32)),r=t(87),o=t(37),h=t(33),d=t(36),j=t(8),m=t(17),f=t(256),w=function(n,e,t,desc){var l,c=arguments.length,r=c<3?e:null===desc?desc=Object.getOwnPropertyDescriptor(e,t):desc;if("object"===("undefined"==typeof Reflect?"undefined":Object(j.a)(Reflect))&&"function"==typeof Reflect.decorate)r=Reflect.decorate(n,e,t,desc);else for(var i=n.length-1;i>=0;i--)(l=n[i])&&(r=(c<3?l(r):c>3?l(e,t,r):l(e,t))||r);return c>3&&r&&Object.defineProperty(e,t,r),r},y=function(n){function e(){var n;return Object(c.a)(this,e),(n=Object(o.a)(this,Object(h.a)(e).apply(this,arguments))).format=f.format,n}return Object(d.a)(e,n),Object(r.a)(e,[{key:"created",value:function(){var n=this,e=this.$store.state.posts.find(function(e){return e.fileName===n.$route.path.replace(/\//g,"")});this.$store.commit("setPost",e)}},{key:"title",get:function(){return this.$store.state.post.attributes.title}},{key:"date",get:function(){return this.$store.state.post.attributes.date}},{key:"body",get:function(){return this.$store.state.post.body.replace(/\r?\n/g,"")}},{key:"image",get:function(){return this.$store.state.post.attributes.image}}]),e}(m.b),v=y=w([Object(m.a)({asyncData:function(){var n=Object(l.a)(regeneratorRuntime.mark(function n(e){var l,c;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return l=e.params,n.next=3,t(403)("./".concat(l.slug,".md"));case 3:return c=n.sent,n.abrupt("return",{content:c.default});case 5:case"end":return n.stop()}},n)}));return function(e){return n.apply(this,arguments)}}(),head:function(){var head={title:"".concat(this.title," | Naoki Otsu"),meta:[{hid:"description",name:"description",content:this.body},{name:"twitter:card",content:this.image?"summary_large_image":"summary"},{name:"og:title",content:this.title},{name:"og:description",content:this.body},{name:"og:image",content:this.image||"https://blog.naoki-otsu.com/icon.png"}]};return head}})],y),k=(t(446),t(12)),component=Object(k.a)(v,function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"container"},[t("h1",[n._v(n._s(n.title))]),n._v(" "),t("p",{staticClass:"date"},[n._v(n._s(n.format(n.date,"YYYY-MM-DD")))]),n._v(" "),t("div",{staticClass:"contents",domProps:{innerHTML:n._s(n.content)}}),n._v(" "),t("no-ssr",[t("div",{staticClass:"sns"},[t("div",{staticClass:"twitter"},[t("a",{staticClass:"twitter-share-button",attrs:{href:"https://twitter.com/share?ref_src=twsrc%5Etfw","data-show-count":"false"}},[n._v("\n          Tweet\n        ")]),n._v(" "),t("script",{attrs:{async:"",src:"https://platform.twitter.com/widgets.js",charset:"utf-8"}})]),n._v(" "),t("div",{staticClass:"hatena"},[t("a",{staticClass:"hatena-bookmark-button",attrs:{href:"http://b.hatena.ne.jp/entry/","data-hatena-bookmark-layout":"basic-label-counter","data-hatena-bookmark-lang":"ja",title:"このエントリーをはてなブックマークに追加"}},[t("img",{staticStyle:{border:"none"},attrs:{src:"https://b.st-hatena.com/images/entry-button/button-only@2x.png",alt:"このエントリーをはてなブックマークに追加",width:"20",height:"20"}})]),n._v(" "),t("script",{attrs:{type:"text/javascript",src:"https://b.st-hatena.com/js/bookmark_button.js",charset:"utf-8",async:"async"}})])])])],1)},[],!1,null,"6b5526b6",null);e.default=component.exports}}]);